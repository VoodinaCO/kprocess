//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kprocess.KL2.Models
{
    using KProcess;
    using KProcess.Presentation.Windows;
    using System;
    using System.Data.Common;
    using System.Data.Entity;
    using System.Data.Entity.Core;
    using System.Data.Entity.Infrastructure;
    using System.Threading.Tasks;
    
    public partial class KsmedEntities : DbContext
    {
        public const string ConnectionString = "name=KsmedEntities";
        public const string ContainerName = "KsmedEntities";
    
        static KsmedEntities()
        {
            Database.SetInitializer(new NullDatabaseInitializer<KsmedEntities>());
        }
    
        public KsmedEntities()
            : base(ConnectionString)
        {
    		Configuration.ProxyCreationEnabled = false;
        }
    
        public KsmedEntities(string connectionString)
            : base(connectionString)
        {
    		Configuration.ProxyCreationEnabled = false;
        }
    
        public KsmedEntities(DbConnection connection)
            : base(connection, true)
        {
    		Configuration.ProxyCreationEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
            
        /// <summary>
        /// Obtient ou définit le nom de l'utilisateur qui modifie actuellement les données.
        /// </summary>
        public string CurrentEditingUsername { get; set; }
        
        /// <summary>
        /// Sauvegarde les changements dans la base de données.
        /// </summary>
        public override async Task<int> SaveChangesAsync()
        {
            int ret = 0;
            try
            {
                ret = await base.SaveChangesAsync();
            }
            catch (OptimisticConcurrencyException ex)
            {
                Console.WriteLine("Db Concurrency occured");
                // On affiche un message d'erreur indiquant l'exception et on recharge les valeurs des entités qui ont été modifiées
                var dialogResult = IoC.Resolve<IDialogFactory>().GetDialogView<IMessageDialog>().Show(LocalizationManagerExt.GetSafeDesignerString("Common_Context_DbConcurrency_Message"), LocalizationManagerExt.GetSafeDesignerString("Common_Context_DbConcurrency_Title"));
                foreach (var objectStateEntry in ex.StateEntries)
                    await Entry(objectStateEntry.Entity).ReloadAsync();
        
                ret = -666;
            }
            catch(Exception ex)
            {
                Console.WriteLine($"Exception non gérée : {ex.Message}");
                throw ex;
            }
            return ret;
        }
                
        /// <summary>
        /// Sauvegarde les changements dans la base de données en spécifiant le nom de l'utilisateur qui effectue ces changements.
        /// </summary>
        /// <param name="username">Le nom de l'utilisateur.</param>
        public Task SaveChangesAsync(string username)
        {
            CurrentEditingUsername = username;
            return SaveChangesAsync();
        }
    
        public virtual DbSet<ActionCategory> ActionCategories { get; set; }
        public virtual DbSet<ActionType> ActionTypes { get; set; }
        public virtual DbSet<ActionValue> ActionValues { get; set; }
        public virtual DbSet<AppResourceKey> AppResourceKeys { get; set; }
        public virtual DbSet<AppResourceValue> AppResourceValues { get; set; }
        public virtual DbSet<AppSetting> AppSettings { get; set; }
        public virtual DbSet<KAction> KActions { get; set; }
        public virtual DbSet<KActionReduced> KActionsReduced { get; set; }
        public virtual DbSet<Procedure> Procedures { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<Objective> Objectives { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<ProjectDir> ProjectDirs { get; set; }
        public virtual DbSet<ProjectReferential> ProjectReferentials { get; set; }
        public virtual DbSet<Ref1> Refs1 { get; set; }
        public virtual DbSet<Ref1Action> Ref1Actions { get; set; }
        public virtual DbSet<Ref2> Refs2 { get; set; }
        public virtual DbSet<Ref2Action> Ref2Actions { get; set; }
        public virtual DbSet<Ref3> Refs3 { get; set; }
        public virtual DbSet<Ref3Action> Ref3Actions { get; set; }
        public virtual DbSet<Ref4> Refs4 { get; set; }
        public virtual DbSet<Ref4Action> Ref4Actions { get; set; }
        public virtual DbSet<Ref5> Refs5 { get; set; }
        public virtual DbSet<Ref5Action> Ref5Actions { get; set; }
        public virtual DbSet<Ref6> Refs6 { get; set; }
        public virtual DbSet<Ref6Action> Ref6Actions { get; set; }
        public virtual DbSet<Ref7> Refs7 { get; set; }
        public virtual DbSet<Ref7Action> Ref7Actions { get; set; }
        public virtual DbSet<Referential> Referentials { get; set; }
        public virtual DbSet<Resource> Resources { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Scenario> Scenarios { get; set; }
        public virtual DbSet<ScenarioNature> ScenarioNatures { get; set; }
        public virtual DbSet<ScenarioState> ScenarioStates { get; set; }
        public virtual DbSet<Solution> Solutions { get; set; }
        public virtual DbSet<UISetting> UISettings { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserRoleProject> UserRoleProjects { get; set; }
        public virtual DbSet<Video> Videos { get; set; }
        public virtual DbSet<VideoNature> VideoNatures { get; set; }
        public virtual DbSet<CutVideo> CutVideos { get; set; }
        public virtual DbSet<Publication> Publications { get; set; }
        public virtual DbSet<PublishedAction> PublishedActions { get; set; }
        public virtual DbSet<PublishedActionCategory> PublishedActionCategories { get; set; }
        public virtual DbSet<PublishedReferential> PublishedReferentials { get; set; }
        public virtual DbSet<PublishedReferentialAction> PublishedReferentialActions { get; set; }
        public virtual DbSet<PublishedResource> PublishedResources { get; set; }
        public virtual DbSet<PublishedFile> PublishedFiles { get; set; }
        public virtual DbSet<Team> Teams { get; set; }
    }
}
