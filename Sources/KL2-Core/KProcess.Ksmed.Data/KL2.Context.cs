
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Core;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects.DataClasses;
using System.Data.Entity.Core.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using KProcess.Ksmed.Models;
using KProcess.Presentation.Windows;
using System.Threading.Tasks;

namespace KProcess.Ksmed.Data
{
    public partial class KsmedEntities : ObjectContext
    {
        public const string ConnectionString = "name=KsmedEntities";
        public const string ContainerName = "KsmedEntities";
    
        #region Constructors
    
        public KsmedEntities()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public KsmedEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public KsmedEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // Creating proxies requires the use of the ProxyDataContractResolver and
            // may allow lazy loading which can expand the loaded graph during serialization.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
        
        /// <summary>
        /// Obtient ou définit le nom de l'utilisateur qui modifie actuellement les données.
        /// </summary>
        public string CurrentEditingUsername { get; set; }
    
    	/// <summary>
    	/// Sauvegarde les changements dans la base de données.
    	/// </summary>
        public override async Task<int> SaveChangesAsync()
        {
            int ret = 0;
            try
            {
                ret = await base.SaveChangesAsync();
            }
            catch (OptimisticConcurrencyException ex)
            {
                Console.WriteLine("Db Concurrency occured");
                // On affiche un message d'erreur indiquant l'exception et on recharge les valeurs des entités qui ont été modifiées
                var dialogResult = IoC.Resolve<IDialogFactory>().GetDialogView<IMessageDialog>().Show(LocalizationManagerExt.GetSafeDesignerString("Common_Context_DbConcurrency_Message"), LocalizationManagerExt.GetSafeDesignerString("Common_Context_DbConcurrency_Title"));
                await RefreshAsync(RefreshMode.StoreWins, ex.StateEntries.Select(_ => _.Entity));
                //await RefreshAsync(RefreshMode.StoreWins, allchangedEntities.Select(_ => _.Value));
    
                ret = -666;
            }
            catch(Exception ex)
            {
                Console.WriteLine(DateTime.Now.ToString("[yyyy-MM-dd HH:mm:ss]"));
                Console.WriteLine($"Exception non gérée : {ex.Message}");

                while (ex.InnerException != null)
                {
                    Console.WriteLine(ex.InnerException.Message);
                    ex = ex.InnerException;
                }

                throw;
            }
            return ret;
        }
    
    	/// <summary>
    	/// Sauvegarde les changements dans la base de données en spécifiant le nom de l'utilisateur qui effectue ces changements.
    	/// </summary>
    	/// <param name="options">Les options d'enregistrement.</param>
    	public override async Task<int> SaveChangesAsync(SaveOptions options)
    	{
    		int ret = 0;
    		try
    		{
    			ret = await base.SaveChangesAsync(options);
    		}
    		catch (OptimisticConcurrencyException ex)
    		{
    			Console.WriteLine("Db Concurrency occured");
    			// On affiche un message d'erreur indiquant l'exception et on recharge les valeurs des entités qui ont été modifiées
    			var dialogResult = IoC.Resolve<IDialogFactory>().GetDialogView<IMessageDialog>().Show(LocalizationManagerExt.GetSafeDesignerString("Common_Context_DbConcurrency_Message"), LocalizationManagerExt.GetSafeDesignerString("Common_Context_DbConcurrency_Title"));
    			await RefreshAsync(RefreshMode.StoreWins, ex.StateEntries.Select(_ => _.Entity));
    			//await RefreshAsync(RefreshMode.StoreWins, allchangedEntities.Select(_ => _.Value));
    
    			ret = -666;
    		}
    		catch (Exception ex)
    		{
    			Console.WriteLine($"Exception non gérée : {ex.Message}");
    		}
    		return ret;
    	}
            
        /// <summary>
        /// Sauvegarde les changements dans la base de données en spécifiant le nom de l'utilisateur qui effectue ces changements.
        /// </summary>
        /// <param name="username">Le nom de l'utilisateur.</param>
        public Task SaveChangesAsync(string username)
        {
            CurrentEditingUsername = username;
            return SaveChangesAsync();
        }
    
        #endregion
    
        #region Type names
    	public const string KActionTypeName = "Kprocess.KL2Model.KAction";
    	public const string KActionReducedTypeName = "Kprocess.KL2Model.KActionReduced";
    	public const string ActionTypeTypeName = "Kprocess.KL2Model.ActionType";
    	public const string ActionValueTypeName = "Kprocess.KL2Model.ActionValue";
    	public const string AnomalyTypeName = "Kprocess.KL2Model.Anomaly";
    	public const string AppResourceKeyTypeName = "Kprocess.KL2Model.AppResourceKey";
    	public const string AppResourceValueTypeName = "Kprocess.KL2Model.AppResourceValue";
    	public const string AppSettingTypeName = "Kprocess.KL2Model.AppSetting";
    	public const string AuditTypeName = "Kprocess.KL2Model.Audit";
    	public const string AuditItemTypeName = "Kprocess.KL2Model.AuditItem";
    	public const string CloudFileTypeName = "Kprocess.KL2Model.CloudFile";
    	public const string CutVideoTypeName = "Kprocess.KL2Model.CutVideo";
    	public const string DocumentationActionDraftTypeName = "Kprocess.KL2Model.DocumentationActionDraft";
    	public const string DocumentationActionDraftWBSTypeName = "Kprocess.KL2Model.DocumentationActionDraftWBS";
    	public const string DocumentationDraftTypeName = "Kprocess.KL2Model.DocumentationDraft";
    	public const string InspectionTypeName = "Kprocess.KL2Model.Inspection";
    	public const string InspectionScheduleTypeName = "Kprocess.KL2Model.InspectionSchedule";
    	public const string InspectionStepTypeName = "Kprocess.KL2Model.InspectionStep";
    	public const string LanguageTypeName = "Kprocess.KL2Model.Language";
    	public const string NotificationTypeName = "Kprocess.KL2Model.Notification";
    	public const string NotificationAttachmentTypeName = "Kprocess.KL2Model.NotificationAttachment";
    	public const string NotificationTypeTypeName = "Kprocess.KL2Model.NotificationType";
    	public const string NotificationTypeSettingTypeName = "Kprocess.KL2Model.NotificationTypeSetting";
    	public const string ObjectiveTypeName = "Kprocess.KL2Model.Objective";
    	public const string ProjectTypeName = "Kprocess.KL2Model.Project";
    	public const string ProjectDirTypeName = "Kprocess.KL2Model.ProjectDir";
    	public const string ProjectReferentialTypeName = "Kprocess.KL2Model.ProjectReferential";
    	public const string PublicationTypeName = "Kprocess.KL2Model.Publication";
    	public const string PublicationLocalizationTypeName = "Kprocess.KL2Model.PublicationLocalization";
    	public const string PublishedActionTypeName = "Kprocess.KL2Model.PublishedAction";
    	public const string PublishedActionCategoryTypeName = "Kprocess.KL2Model.PublishedActionCategory";
    	public const string PublishedFileTypeName = "Kprocess.KL2Model.PublishedFile";
    	public const string PublishedReferentialTypeName = "Kprocess.KL2Model.PublishedReferential";
    	public const string PublishedReferentialActionTypeName = "Kprocess.KL2Model.PublishedReferentialAction";
    	public const string PublishedResourceTypeName = "Kprocess.KL2Model.PublishedResource";
    	public const string Ref1TypeName = "Kprocess.KL2Model.Ref1";
    	public const string Ref1ActionTypeName = "Kprocess.KL2Model.Ref1Action";
    	public const string Ref2TypeName = "Kprocess.KL2Model.Ref2";
    	public const string Ref2ActionTypeName = "Kprocess.KL2Model.Ref2Action";
    	public const string Ref3TypeName = "Kprocess.KL2Model.Ref3";
    	public const string Ref3ActionTypeName = "Kprocess.KL2Model.Ref3Action";
    	public const string Ref4TypeName = "Kprocess.KL2Model.Ref4";
    	public const string Ref4ActionTypeName = "Kprocess.KL2Model.Ref4Action";
    	public const string Ref5TypeName = "Kprocess.KL2Model.Ref5";
    	public const string Ref5ActionTypeName = "Kprocess.KL2Model.Ref5Action";
    	public const string Ref6TypeName = "Kprocess.KL2Model.Ref6";
    	public const string Ref6ActionTypeName = "Kprocess.KL2Model.Ref6Action";
    	public const string Ref7TypeName = "Kprocess.KL2Model.Ref7";
    	public const string Ref7ActionTypeName = "Kprocess.KL2Model.Ref7Action";
    	public const string ActionCategoryTypeName = "Kprocess.KL2Model.ActionCategory";
    	public const string ResourceTypeName = "Kprocess.KL2Model.Resource";
    	public const string EquipmentTypeName = "Kprocess.KL2Model.Equipment";
    	public const string ReferentialTypeName = "Kprocess.KL2Model.Referential";
    	public const string OperatorTypeName = "Kprocess.KL2Model.Operator";
    	public const string ProcedureTypeName = "Kprocess.KL2Model.Procedure";
    	public const string QualificationTypeName = "Kprocess.KL2Model.Qualification";
    	public const string QualificationReasonTypeName = "Kprocess.KL2Model.QualificationReason";
    	public const string QualificationStepTypeName = "Kprocess.KL2Model.QualificationStep";
    	public const string RoleTypeName = "Kprocess.KL2Model.Role";
    	public const string ScenarioTypeName = "Kprocess.KL2Model.Scenario";
    	public const string ScenarioNatureTypeName = "Kprocess.KL2Model.ScenarioNature";
    	public const string ScenarioStateTypeName = "Kprocess.KL2Model.ScenarioState";
    	public const string SkillTypeName = "Kprocess.KL2Model.Skill";
    	public const string SolutionTypeName = "Kprocess.KL2Model.Solution";
    	public const string SurveyTypeName = "Kprocess.KL2Model.Survey";
    	public const string SurveyItemTypeName = "Kprocess.KL2Model.SurveyItem";
    	public const string TeamTypeName = "Kprocess.KL2Model.Team";
    	public const string TimeslotTypeName = "Kprocess.KL2Model.Timeslot";
    	public const string TrainingTypeName = "Kprocess.KL2Model.Training";
    	public const string UISettingTypeName = "Kprocess.KL2Model.UISetting";
    	public const string UserTypeName = "Kprocess.KL2Model.User";
    	public const string UserReadPublicationTypeName = "Kprocess.KL2Model.UserReadPublication";
    	public const string ValidationTrainingTypeName = "Kprocess.KL2Model.ValidationTraining";
    	public const string VideoTypeName = "Kprocess.KL2Model.Video";
    	public const string VideoSyncTypeName = "Kprocess.KL2Model.VideoSync";
    	public const string UserRoleProcessTypeName = "Kprocess.KL2Model.UserRoleProcess";
    	public const string PublicationHistoryTypeName = "Kprocess.KL2Model.PublicationHistory";
    	public const string DocumentationReferentialTypeName = "Kprocess.KL2Model.DocumentationReferential";
    	public const string DocumentationDraftLocalizationTypeName = "Kprocess.KL2Model.DocumentationDraftLocalization";
    	public const string ReferentialDocumentationActionDraftTypeName = "Kprocess.KL2Model.ReferentialDocumentationActionDraft";

        #endregion

    
            #region ObjectSet Properties
    
    	public const string ActionCategoriesEntitySetName = "ActionCategories";
    
        public ObjectSet<ActionCategory> ActionCategories
        {
            get { return _actionCategories  ?? (_actionCategories = CreateObjectSet<ActionCategory>("ActionCategories")); }
        }
        private ObjectSet<ActionCategory> _actionCategories;
    
    	public const string ActionTypesEntitySetName = "ActionTypes";
    
        public ObjectSet<ActionType> ActionTypes
        {
            get { return _actionTypes  ?? (_actionTypes = CreateObjectSet<ActionType>("ActionTypes")); }
        }
        private ObjectSet<ActionType> _actionTypes;
    
    	public const string ActionValuesEntitySetName = "ActionValues";
    
        public ObjectSet<ActionValue> ActionValues
        {
            get { return _actionValues  ?? (_actionValues = CreateObjectSet<ActionValue>("ActionValues")); }
        }
        private ObjectSet<ActionValue> _actionValues;
    
    	public const string AppResourceKeysEntitySetName = "AppResourceKeys";
    
        public ObjectSet<AppResourceKey> AppResourceKeys
        {
            get { return _appResourceKeys  ?? (_appResourceKeys = CreateObjectSet<AppResourceKey>("AppResourceKeys")); }
        }
        private ObjectSet<AppResourceKey> _appResourceKeys;
    
    	public const string AppResourceValuesEntitySetName = "AppResourceValues";
    
        public ObjectSet<AppResourceValue> AppResourceValues
        {
            get { return _appResourceValues  ?? (_appResourceValues = CreateObjectSet<AppResourceValue>("AppResourceValues")); }
        }
        private ObjectSet<AppResourceValue> _appResourceValues;
    
    	public const string AppSettingsEntitySetName = "AppSettings";
    
        public ObjectSet<AppSetting> AppSettings
        {
            get { return _appSettings  ?? (_appSettings = CreateObjectSet<AppSetting>("AppSettings")); }
        }
        private ObjectSet<AppSetting> _appSettings;
    
    	public const string KActionsEntitySetName = "KActions";
    
        public ObjectSet<KAction> KActions
        {
            get { return _kActions  ?? (_kActions = CreateObjectSet<KAction>("KActions")); }
        }
        private ObjectSet<KAction> _kActions;
    
    	public const string KActionsReducedEntitySetName = "KActionsReduced";
    
        public ObjectSet<KActionReduced> KActionsReduced
        {
            get { return _kActionsReduced  ?? (_kActionsReduced = CreateObjectSet<KActionReduced>("KActionsReduced")); }
        }
        private ObjectSet<KActionReduced> _kActionsReduced;
    
    	public const string ProceduresEntitySetName = "Procedures";
    
        public ObjectSet<Procedure> Procedures
        {
            get { return _procedures  ?? (_procedures = CreateObjectSet<Procedure>("Procedures")); }
        }
        private ObjectSet<Procedure> _procedures;
    
    	public const string LanguagesEntitySetName = "Languages";
    
        public ObjectSet<Language> Languages
        {
            get { return _languages  ?? (_languages = CreateObjectSet<Language>("Languages")); }
        }
        private ObjectSet<Language> _languages;
    
    	public const string ObjectivesEntitySetName = "Objectives";
    
        public ObjectSet<Objective> Objectives
        {
            get { return _objectives  ?? (_objectives = CreateObjectSet<Objective>("Objectives")); }
        }
        private ObjectSet<Objective> _objectives;
    
    	public const string ProjectsEntitySetName = "Projects";
    
        public ObjectSet<Project> Projects
        {
            get { return _projects  ?? (_projects = CreateObjectSet<Project>("Projects")); }
        }
        private ObjectSet<Project> _projects;
    
    	public const string ProjectDirsEntitySetName = "ProjectDirs";
    
        public ObjectSet<ProjectDir> ProjectDirs
        {
            get { return _projectDirs  ?? (_projectDirs = CreateObjectSet<ProjectDir>("ProjectDirs")); }
        }
        private ObjectSet<ProjectDir> _projectDirs;
    
    	public const string ProjectReferentialsEntitySetName = "ProjectReferentials";
    
        public ObjectSet<ProjectReferential> ProjectReferentials
        {
            get { return _projectReferentials  ?? (_projectReferentials = CreateObjectSet<ProjectReferential>("ProjectReferentials")); }
        }
        private ObjectSet<ProjectReferential> _projectReferentials;
    
    	public const string Refs1EntitySetName = "Refs1";
    
        public ObjectSet<Ref1> Refs1
        {
            get { return _refs1  ?? (_refs1 = CreateObjectSet<Ref1>("Refs1")); }
        }
        private ObjectSet<Ref1> _refs1;
    
    	public const string Ref1ActionsEntitySetName = "Ref1Actions";
    
        public ObjectSet<Ref1Action> Ref1Actions
        {
            get { return _ref1Actions  ?? (_ref1Actions = CreateObjectSet<Ref1Action>("Ref1Actions")); }
        }
        private ObjectSet<Ref1Action> _ref1Actions;
    
    	public const string Refs2EntitySetName = "Refs2";
    
        public ObjectSet<Ref2> Refs2
        {
            get { return _refs2  ?? (_refs2 = CreateObjectSet<Ref2>("Refs2")); }
        }
        private ObjectSet<Ref2> _refs2;
    
    	public const string Ref2ActionsEntitySetName = "Ref2Actions";
    
        public ObjectSet<Ref2Action> Ref2Actions
        {
            get { return _ref2Actions  ?? (_ref2Actions = CreateObjectSet<Ref2Action>("Ref2Actions")); }
        }
        private ObjectSet<Ref2Action> _ref2Actions;
    
    	public const string Refs3EntitySetName = "Refs3";
    
        public ObjectSet<Ref3> Refs3
        {
            get { return _refs3  ?? (_refs3 = CreateObjectSet<Ref3>("Refs3")); }
        }
        private ObjectSet<Ref3> _refs3;
    
    	public const string Ref3ActionsEntitySetName = "Ref3Actions";
    
        public ObjectSet<Ref3Action> Ref3Actions
        {
            get { return _ref3Actions  ?? (_ref3Actions = CreateObjectSet<Ref3Action>("Ref3Actions")); }
        }
        private ObjectSet<Ref3Action> _ref3Actions;
    
    	public const string Refs4EntitySetName = "Refs4";
    
        public ObjectSet<Ref4> Refs4
        {
            get { return _refs4  ?? (_refs4 = CreateObjectSet<Ref4>("Refs4")); }
        }
        private ObjectSet<Ref4> _refs4;
    
    	public const string Ref4ActionsEntitySetName = "Ref4Actions";
    
        public ObjectSet<Ref4Action> Ref4Actions
        {
            get { return _ref4Actions  ?? (_ref4Actions = CreateObjectSet<Ref4Action>("Ref4Actions")); }
        }
        private ObjectSet<Ref4Action> _ref4Actions;
    
    	public const string Refs5EntitySetName = "Refs5";
    
        public ObjectSet<Ref5> Refs5
        {
            get { return _refs5  ?? (_refs5 = CreateObjectSet<Ref5>("Refs5")); }
        }
        private ObjectSet<Ref5> _refs5;
    
    	public const string Ref5ActionsEntitySetName = "Ref5Actions";
    
        public ObjectSet<Ref5Action> Ref5Actions
        {
            get { return _ref5Actions  ?? (_ref5Actions = CreateObjectSet<Ref5Action>("Ref5Actions")); }
        }
        private ObjectSet<Ref5Action> _ref5Actions;
    
    	public const string Refs6EntitySetName = "Refs6";
    
        public ObjectSet<Ref6> Refs6
        {
            get { return _refs6  ?? (_refs6 = CreateObjectSet<Ref6>("Refs6")); }
        }
        private ObjectSet<Ref6> _refs6;
    
    	public const string Ref6ActionsEntitySetName = "Ref6Actions";
    
        public ObjectSet<Ref6Action> Ref6Actions
        {
            get { return _ref6Actions  ?? (_ref6Actions = CreateObjectSet<Ref6Action>("Ref6Actions")); }
        }
        private ObjectSet<Ref6Action> _ref6Actions;
    
    	public const string Refs7EntitySetName = "Refs7";
    
        public ObjectSet<Ref7> Refs7
        {
            get { return _refs7  ?? (_refs7 = CreateObjectSet<Ref7>("Refs7")); }
        }
        private ObjectSet<Ref7> _refs7;
    
    	public const string Ref7ActionsEntitySetName = "Ref7Actions";
    
        public ObjectSet<Ref7Action> Ref7Actions
        {
            get { return _ref7Actions  ?? (_ref7Actions = CreateObjectSet<Ref7Action>("Ref7Actions")); }
        }
        private ObjectSet<Ref7Action> _ref7Actions;
    
    	public const string ReferentialsEntitySetName = "Referentials";
    
        public ObjectSet<Referential> Referentials
        {
            get { return _referentials  ?? (_referentials = CreateObjectSet<Referential>("Referentials")); }
        }
        private ObjectSet<Referential> _referentials;
    
    	public const string ResourcesEntitySetName = "Resources";
    
        public ObjectSet<Resource> Resources
        {
            get { return _resources  ?? (_resources = CreateObjectSet<Resource>("Resources")); }
        }
        private ObjectSet<Resource> _resources;
    
    	public const string RolesEntitySetName = "Roles";
    
        public ObjectSet<Role> Roles
        {
            get { return _roles  ?? (_roles = CreateObjectSet<Role>("Roles")); }
        }
        private ObjectSet<Role> _roles;
    
    	public const string ScenariosEntitySetName = "Scenarios";
    
        public ObjectSet<Scenario> Scenarios
        {
            get { return _scenarios  ?? (_scenarios = CreateObjectSet<Scenario>("Scenarios")); }
        }
        private ObjectSet<Scenario> _scenarios;
    
    	public const string ScenarioNaturesEntitySetName = "ScenarioNatures";
    
        public ObjectSet<ScenarioNature> ScenarioNatures
        {
            get { return _scenarioNatures  ?? (_scenarioNatures = CreateObjectSet<ScenarioNature>("ScenarioNatures")); }
        }
        private ObjectSet<ScenarioNature> _scenarioNatures;
    
    	public const string ScenarioStatesEntitySetName = "ScenarioStates";
    
        public ObjectSet<ScenarioState> ScenarioStates
        {
            get { return _scenarioStates  ?? (_scenarioStates = CreateObjectSet<ScenarioState>("ScenarioStates")); }
        }
        private ObjectSet<ScenarioState> _scenarioStates;
    
    	public const string SolutionsEntitySetName = "Solutions";
    
        public ObjectSet<Solution> Solutions
        {
            get { return _solutions  ?? (_solutions = CreateObjectSet<Solution>("Solutions")); }
        }
        private ObjectSet<Solution> _solutions;
    
    	public const string UISettingsEntitySetName = "UISettings";
    
        public ObjectSet<UISetting> UISettings
        {
            get { return _uISettings  ?? (_uISettings = CreateObjectSet<UISetting>("UISettings")); }
        }
        private ObjectSet<UISetting> _uISettings;
    
    	public const string UsersEntitySetName = "Users";
    
        public ObjectSet<User> Users
        {
            get { return _users  ?? (_users = CreateObjectSet<User>("Users")); }
        }
        private ObjectSet<User> _users;
    
    	public const string VideosEntitySetName = "Videos";
    
        public ObjectSet<Video> Videos
        {
            get { return _videos  ?? (_videos = CreateObjectSet<Video>("Videos")); }
        }
        private ObjectSet<Video> _videos;
    
    	public const string CutVideosEntitySetName = "CutVideos";
    
        public ObjectSet<CutVideo> CutVideos
        {
            get { return _cutVideos  ?? (_cutVideos = CreateObjectSet<CutVideo>("CutVideos")); }
        }
        private ObjectSet<CutVideo> _cutVideos;
    
    	public const string PublicationsEntitySetName = "Publications";
    
        public ObjectSet<Publication> Publications
        {
            get { return _publications  ?? (_publications = CreateObjectSet<Publication>("Publications")); }
        }
        private ObjectSet<Publication> _publications;
    
    	public const string PublishedActionsEntitySetName = "PublishedActions";
    
        public ObjectSet<PublishedAction> PublishedActions
        {
            get { return _publishedActions  ?? (_publishedActions = CreateObjectSet<PublishedAction>("PublishedActions")); }
        }
        private ObjectSet<PublishedAction> _publishedActions;
    
    	public const string PublishedActionCategoriesEntitySetName = "PublishedActionCategories";
    
        public ObjectSet<PublishedActionCategory> PublishedActionCategories
        {
            get { return _publishedActionCategories  ?? (_publishedActionCategories = CreateObjectSet<PublishedActionCategory>("PublishedActionCategories")); }
        }
        private ObjectSet<PublishedActionCategory> _publishedActionCategories;
    
    	public const string PublishedReferentialsEntitySetName = "PublishedReferentials";
    
        public ObjectSet<PublishedReferential> PublishedReferentials
        {
            get { return _publishedReferentials  ?? (_publishedReferentials = CreateObjectSet<PublishedReferential>("PublishedReferentials")); }
        }
        private ObjectSet<PublishedReferential> _publishedReferentials;
    
    	public const string PublishedReferentialActionsEntitySetName = "PublishedReferentialActions";
    
        public ObjectSet<PublishedReferentialAction> PublishedReferentialActions
        {
            get { return _publishedReferentialActions  ?? (_publishedReferentialActions = CreateObjectSet<PublishedReferentialAction>("PublishedReferentialActions")); }
        }
        private ObjectSet<PublishedReferentialAction> _publishedReferentialActions;
    
    	public const string PublishedResourcesEntitySetName = "PublishedResources";
    
        public ObjectSet<PublishedResource> PublishedResources
        {
            get { return _publishedResources  ?? (_publishedResources = CreateObjectSet<PublishedResource>("PublishedResources")); }
        }
        private ObjectSet<PublishedResource> _publishedResources;
    
    	public const string PublishedFilesEntitySetName = "PublishedFiles";
    
        public ObjectSet<PublishedFile> PublishedFiles
        {
            get { return _publishedFiles  ?? (_publishedFiles = CreateObjectSet<PublishedFile>("PublishedFiles")); }
        }
        private ObjectSet<PublishedFile> _publishedFiles;
    
    	public const string TeamsEntitySetName = "Teams";
    
        public ObjectSet<Team> Teams
        {
            get { return _teams  ?? (_teams = CreateObjectSet<Team>("Teams")); }
        }
        private ObjectSet<Team> _teams;
    
    	public const string PublicationLocalizationsEntitySetName = "PublicationLocalizations";
    
        public ObjectSet<PublicationLocalization> PublicationLocalizations
        {
            get { return _publicationLocalizations  ?? (_publicationLocalizations = CreateObjectSet<PublicationLocalization>("PublicationLocalizations")); }
        }
        private ObjectSet<PublicationLocalization> _publicationLocalizations;
    
    	public const string UserReadPublicationsEntitySetName = "UserReadPublications";
    
        public ObjectSet<UserReadPublication> UserReadPublications
        {
            get { return _userReadPublications  ?? (_userReadPublications = CreateObjectSet<UserReadPublication>("UserReadPublications")); }
        }
        private ObjectSet<UserReadPublication> _userReadPublications;
    
    	public const string TrainingsEntitySetName = "Trainings";
    
        public ObjectSet<Training> Trainings
        {
            get { return _trainings  ?? (_trainings = CreateObjectSet<Training>("Trainings")); }
        }
        private ObjectSet<Training> _trainings;
    
    	public const string ValidationTrainingsEntitySetName = "ValidationTrainings";
    
        public ObjectSet<ValidationTraining> ValidationTrainings
        {
            get { return _validationTrainings  ?? (_validationTrainings = CreateObjectSet<ValidationTraining>("ValidationTrainings")); }
        }
        private ObjectSet<ValidationTraining> _validationTrainings;
    
    	public const string QualificationsEntitySetName = "Qualifications";
    
        public ObjectSet<Qualification> Qualifications
        {
            get { return _qualifications  ?? (_qualifications = CreateObjectSet<Qualification>("Qualifications")); }
        }
        private ObjectSet<Qualification> _qualifications;
    
    	public const string QualificationStepsEntitySetName = "QualificationSteps";
    
        public ObjectSet<QualificationStep> QualificationSteps
        {
            get { return _qualificationSteps  ?? (_qualificationSteps = CreateObjectSet<QualificationStep>("QualificationSteps")); }
        }
        private ObjectSet<QualificationStep> _qualificationSteps;
    
    	public const string SkillsEntitySetName = "Skills";
    
        public ObjectSet<Skill> Skills
        {
            get { return _skills  ?? (_skills = CreateObjectSet<Skill>("Skills")); }
        }
        private ObjectSet<Skill> _skills;
    
    	public const string InspectionsEntitySetName = "Inspections";
    
        public ObjectSet<Inspection> Inspections
        {
            get { return _inspections  ?? (_inspections = CreateObjectSet<Inspection>("Inspections")); }
        }
        private ObjectSet<Inspection> _inspections;
    
    	public const string InspectionStepsEntitySetName = "InspectionSteps";
    
        public ObjectSet<InspectionStep> InspectionSteps
        {
            get { return _inspectionSteps  ?? (_inspectionSteps = CreateObjectSet<InspectionStep>("InspectionSteps")); }
        }
        private ObjectSet<InspectionStep> _inspectionSteps;
    
    	public const string AnomaliesEntitySetName = "Anomalies";
    
        public ObjectSet<Anomaly> Anomalies
        {
            get { return _anomalies  ?? (_anomalies = CreateObjectSet<Anomaly>("Anomalies")); }
        }
        private ObjectSet<Anomaly> _anomalies;
    
    	public const string AuditsEntitySetName = "Audits";
    
        public ObjectSet<Audit> Audits
        {
            get { return _audits  ?? (_audits = CreateObjectSet<Audit>("Audits")); }
        }
        private ObjectSet<Audit> _audits;
    
    	public const string AuditItemsEntitySetName = "AuditItems";
    
        public ObjectSet<AuditItem> AuditItems
        {
            get { return _auditItems  ?? (_auditItems = CreateObjectSet<AuditItem>("AuditItems")); }
        }
        private ObjectSet<AuditItem> _auditItems;
    
    	public const string SurveysEntitySetName = "Surveys";
    
        public ObjectSet<Survey> Surveys
        {
            get { return _surveys  ?? (_surveys = CreateObjectSet<Survey>("Surveys")); }
        }
        private ObjectSet<Survey> _surveys;
    
    	public const string SurveyItemsEntitySetName = "SurveyItems";
    
        public ObjectSet<SurveyItem> SurveyItems
        {
            get { return _surveyItems  ?? (_surveyItems = CreateObjectSet<SurveyItem>("SurveyItems")); }
        }
        private ObjectSet<SurveyItem> _surveyItems;
    
    	public const string QualificationReasonsEntitySetName = "QualificationReasons";
    
        public ObjectSet<QualificationReason> QualificationReasons
        {
            get { return _qualificationReasons  ?? (_qualificationReasons = CreateObjectSet<QualificationReason>("QualificationReasons")); }
        }
        private ObjectSet<QualificationReason> _qualificationReasons;
    
    	public const string VideoSyncsEntitySetName = "VideoSyncs";
    
        public ObjectSet<VideoSync> VideoSyncs
        {
            get { return _videoSyncs  ?? (_videoSyncs = CreateObjectSet<VideoSync>("VideoSyncs")); }
        }
        private ObjectSet<VideoSync> _videoSyncs;
    
    	public const string CloudFilesEntitySetName = "CloudFiles";
    
        public ObjectSet<CloudFile> CloudFiles
        {
            get { return _cloudFiles  ?? (_cloudFiles = CreateObjectSet<CloudFile>("CloudFiles")); }
        }
        private ObjectSet<CloudFile> _cloudFiles;
    
    	public const string InspectionSchedulesEntitySetName = "InspectionSchedules";
    
        public ObjectSet<InspectionSchedule> InspectionSchedules
        {
            get { return _inspectionSchedules  ?? (_inspectionSchedules = CreateObjectSet<InspectionSchedule>("InspectionSchedules")); }
        }
        private ObjectSet<InspectionSchedule> _inspectionSchedules;
    
    	public const string TimeslotsEntitySetName = "Timeslots";
    
        public ObjectSet<Timeslot> Timeslots
        {
            get { return _timeslots  ?? (_timeslots = CreateObjectSet<Timeslot>("Timeslots")); }
        }
        private ObjectSet<Timeslot> _timeslots;
    
    	public const string NotificationsEntitySetName = "Notifications";
    
        public ObjectSet<Notification> Notifications
        {
            get { return _notifications  ?? (_notifications = CreateObjectSet<Notification>("Notifications")); }
        }
        private ObjectSet<Notification> _notifications;
    
    	public const string NotificationAttachmentsEntitySetName = "NotificationAttachments";
    
        public ObjectSet<NotificationAttachment> NotificationAttachments
        {
            get { return _notificationAttachments  ?? (_notificationAttachments = CreateObjectSet<NotificationAttachment>("NotificationAttachments")); }
        }
        private ObjectSet<NotificationAttachment> _notificationAttachments;
    
    	public const string NotificationTypesEntitySetName = "NotificationTypes";
    
        public ObjectSet<NotificationType> NotificationTypes
        {
            get { return _notificationTypes  ?? (_notificationTypes = CreateObjectSet<NotificationType>("NotificationTypes")); }
        }
        private ObjectSet<NotificationType> _notificationTypes;
    
    	public const string NotificationTypeSettingsEntitySetName = "NotificationTypeSettings";
    
        public ObjectSet<NotificationTypeSetting> NotificationTypeSettings
        {
            get { return _notificationTypeSettings  ?? (_notificationTypeSettings = CreateObjectSet<NotificationTypeSetting>("NotificationTypeSettings")); }
        }
        private ObjectSet<NotificationTypeSetting> _notificationTypeSettings;
    
    	public const string DocumentationActionDraftsEntitySetName = "DocumentationActionDrafts";
    
        public ObjectSet<DocumentationActionDraft> DocumentationActionDrafts
        {
            get { return _documentationActionDrafts  ?? (_documentationActionDrafts = CreateObjectSet<DocumentationActionDraft>("DocumentationActionDrafts")); }
        }
        private ObjectSet<DocumentationActionDraft> _documentationActionDrafts;
    
    	public const string DocumentationDraftsEntitySetName = "DocumentationDrafts";
    
        public ObjectSet<DocumentationDraft> DocumentationDrafts
        {
            get { return _documentationDrafts  ?? (_documentationDrafts = CreateObjectSet<DocumentationDraft>("DocumentationDrafts")); }
        }
        private ObjectSet<DocumentationDraft> _documentationDrafts;
    
    	public const string DocumentationActionDraftWBSEntitySetName = "DocumentationActionDraftWBS";
    
        public ObjectSet<DocumentationActionDraftWBS> DocumentationActionDraftWBS
        {
            get { return _documentationActionDraftWBS  ?? (_documentationActionDraftWBS = CreateObjectSet<DocumentationActionDraftWBS>("DocumentationActionDraftWBS")); }
        }
        private ObjectSet<DocumentationActionDraftWBS> _documentationActionDraftWBS;
    
    	public const string UserRoleProcessesEntitySetName = "UserRoleProcesses";
    
        public ObjectSet<UserRoleProcess> UserRoleProcesses
        {
            get { return _userRoleProcesses  ?? (_userRoleProcesses = CreateObjectSet<UserRoleProcess>("UserRoleProcesses")); }
        }
        private ObjectSet<UserRoleProcess> _userRoleProcesses;
    
    	public const string PublicationHistoriesEntitySetName = "PublicationHistories";
    
        public ObjectSet<PublicationHistory> PublicationHistories
        {
            get { return _publicationHistories  ?? (_publicationHistories = CreateObjectSet<PublicationHistory>("PublicationHistories")); }
        }
        private ObjectSet<PublicationHistory> _publicationHistories;
    
    	public const string DocumentationReferentialsEntitySetName = "DocumentationReferentials";
    
        public ObjectSet<DocumentationReferential> DocumentationReferentials
        {
            get { return _documentationReferentials  ?? (_documentationReferentials = CreateObjectSet<DocumentationReferential>("DocumentationReferentials")); }
        }
        private ObjectSet<DocumentationReferential> _documentationReferentials;
    
    	public const string DocumentationDraftLocalizationsEntitySetName = "DocumentationDraftLocalizations";
    
        public ObjectSet<DocumentationDraftLocalization> DocumentationDraftLocalizations
        {
            get { return _documentationDraftLocalizations  ?? (_documentationDraftLocalizations = CreateObjectSet<DocumentationDraftLocalization>("DocumentationDraftLocalizations")); }
        }
        private ObjectSet<DocumentationDraftLocalization> _documentationDraftLocalizations;
    
    	public const string ReferentialDocumentationActionDraftsEntitySetName = "ReferentialDocumentationActionDrafts";
    
        public ObjectSet<ReferentialDocumentationActionDraft> ReferentialDocumentationActionDrafts
        {
            get { return _referentialDocumentationActionDrafts  ?? (_referentialDocumentationActionDrafts = CreateObjectSet<ReferentialDocumentationActionDraft>("ReferentialDocumentationActionDrafts")); }
        }
        private ObjectSet<ReferentialDocumentationActionDraft> _referentialDocumentationActionDrafts;

            #endregion

    }
}
