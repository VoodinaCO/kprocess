namespace DlhSoft.Windows.Controls
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Collections.Specialized;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using System.Reflection;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Threading;
    using System.Windows;
    using System.Windows.Controls;
    using System.Windows.Controls.Primitives;
    using System.Windows.Data;
    using System.Windows.Documents;
    using System.Windows.Input;
    using System.Windows.Media;
    using System.Windows.Media.Imaging;
    using System.Windows.Threading;
    using DlhSoft.Windows.Data;
    using DlhSoft.Windows.Licensing;


    public partial class GanttChartView : ItemsControl, IGanttChartView
    {
        #region KP

        /// <summary>
        /// Obtient ou définit une valeur permettant de désactiver la coercion du Timing des parents.
        /// </summary>
        public bool DisableParentTimingCoercion
        {
            get { return (bool)GetValue(DisableParentTimingCoercionProperty); }
            set { SetValue(DisableParentTimingCoercionProperty, value); }
        }
        /// <summary>
        /// Identifie la propriété de dépendance <see cref="DisableParentTimingCoercion"/>.
        /// </summary>
        public static readonly DependencyProperty DisableParentTimingCoercionProperty =
            DependencyProperty.Register("DisableParentTimingCoercion", typeof(bool), typeof(GanttChartView), new PropertyMetadata(true));

        #endregion

        public static readonly DependencyProperty ActualChartExtentHeightProperty = DependencyProperty.Register("ActualChartExtentHeight", typeof(double), typeof(GanttChartView), new PropertyMetadata((double)1.0 / (double)0.0, new PropertyChangedCallback(GanttChartView.OnActualChartHeightChanged)));
        public static readonly DependencyProperty ActualChartHeightProperty = DependencyProperty.Register("ActualChartHeight", typeof(double), typeof(GanttChartView), new PropertyMetadata((double)1.0 / (double)0.0));
        public static readonly DependencyProperty ActualChartViewportHeightProperty = DependencyProperty.Register("ActualChartViewportHeight", typeof(double), typeof(GanttChartView), new PropertyMetadata((double)1.0 / (double)0.0, new PropertyChangedCallback(GanttChartView.OnActualChartHeightChanged)));
        public static readonly DependencyProperty ActualDisplayRowCountProperty = DependencyProperty.Register("ActualDisplayRowCount", typeof(int), typeof(GanttChartView), new PropertyMetadata(0, new PropertyChangedCallback(GanttChartView.OnActualDisplayRowCountChanged)));
        public static readonly DependencyProperty AreUpdateTimelinePageButtonsVisibleProperty = DependencyProperty.Register("AreUpdateTimelinePageButtonsVisible", typeof(bool), typeof(GanttChartView), new PropertyMetadata(true, new PropertyChangedCallback(GanttChartView.OnAreUpdateTimelinePageButtonsVisibleChanged)));
        public static readonly DependencyProperty AssignmentsTemplateProperty = DependencyProperty.Register("AssignmentsTemplate", typeof(DataTemplate), typeof(GanttChartView), new PropertyMetadata(null));
        private int asyncItemCount;
        private DispatcherTimer asyncTimer;
        private List<DlhSoft.Windows.Controls.Scale> autoGeneratedScales = new List<DlhSoft.Windows.Controls.Scale>();
        public static readonly DependencyProperty BarHeightProperty = DependencyProperty.Register("BarHeight", typeof(double), typeof(GanttChartView), new PropertyMetadata((double)1.0 / (double)0.0));
        public static readonly DependencyProperty CompletedBarHeightProperty = DependencyProperty.Register("CompletedBarHeight", typeof(double), typeof(GanttChartView), new PropertyMetadata((double)1.0 / (double)0.0));
        public static readonly DependencyProperty ComputedDecreaseTimelinePageButtonVisibilityProperty = DependencyProperty.RegisterAttached("ComputedDecreaseTimelinePageButtonVisibility", typeof(Visibility), typeof(GanttChartView), new PropertyMetadata(Visibility.Collapsed));
        public static readonly DependencyProperty ComputedHeightProperty = DependencyProperty.Register("ComputedHeight", typeof(double), typeof(GanttChartView), new PropertyMetadata((double)1.0 / (double)0.0));
        public static readonly DependencyProperty ComputedIncreaseTimelinePageButtonVisibilityProperty = DependencyProperty.RegisterAttached("ComputedIncreaseTimelinePageButtonVisibility", typeof(Visibility), typeof(GanttChartView), new PropertyMetadata(Visibility.Collapsed));
        public static readonly DependencyProperty ComputedWidthProperty = DependencyProperty.RegisterAttached("ComputedWidth", typeof(double), typeof(GanttChartView), new PropertyMetadata((double)1.0 / (double)0.0));
        public static readonly DependencyProperty CurrentTimeLineStrokeProperty = DependencyProperty.Register("CurrentTimeLineStroke", typeof(Brush), typeof(GanttChartView), new PropertyMetadata(null));
        public static readonly DependencyProperty DependencyCreationThumbVisibilityProperty = DependencyProperty.Register("DependencyCreationThumbVisibility", typeof(Visibility), typeof(GanttChartView), new PropertyMetadata(Visibility.Visible));
        public static readonly DependencyProperty DependencyCreationValidatorProperty = DependencyProperty.Register("DependencyCreationValidator", typeof(DlhSoft.Windows.Controls.DependencyCreationValidator), typeof(GanttChartView), new PropertyMetadata(DefaultDependencyCreationValidator, new PropertyChangedCallback(GanttChartView.OnDependencyCreationValidatorChanged)));
        public static readonly DependencyProperty DependencyDeletionContextMenuItemHeaderProperty = DependencyProperty.Register("DependencyDeletionContextMenuItemHeader", typeof(object), typeof(GanttChartView), new PropertyMetadata("Delete"));
        public static readonly DependencyProperty DependencyDeletionPopupVisibilityProperty = DependencyProperty.Register("DependencyDeletionPopupVisibility", typeof(Visibility), typeof(GanttChartView), new PropertyMetadata(Visibility.Visible));
        public static readonly DependencyProperty DependencyDeletionValidatorProperty = DependencyProperty.Register("DependencyDeletionValidator", typeof(DlhSoft.Windows.Controls.DependencyDeletionValidator), typeof(GanttChartView), new PropertyMetadata(DefaultDependencyDeletionValidator, new PropertyChangedCallback(GanttChartView.OnDependencyDeletionValidatorChanged)));
        public static readonly DependencyProperty DependencyLineStrokeProperty = DependencyProperty.RegisterAttached("DependencyLineStroke", typeof(Brush), typeof(GanttChartView), new PropertyMetadata(null));
        public static readonly DependencyProperty DependencyLineStrokeThicknessProperty = DependencyProperty.Register("DependencyLineStrokeThickness", typeof(double), typeof(GanttChartView), new PropertyMetadata(0.0));
        public static readonly DependencyProperty DependencyLineTemplateProperty = DependencyProperty.Register("DependencyLineTemplate", typeof(DataTemplate), typeof(GanttChartView), new PropertyMetadata(null));
        public static readonly DependencyProperty DependencyToolTipVisibilityProperty = DependencyProperty.Register("DependencyToolTipVisibility", typeof(Visibility), typeof(GanttChartView), new PropertyMetadata(Visibility.Visible));
        public static readonly DependencyProperty DisplayedTimeProperty = DependencyProperty.Register("DisplayedTime", typeof(DateTime), typeof(GanttChartView), new PropertyMetadata(DateTime.Now.AddDays(-1.0), new PropertyChangedCallback(GanttChartView.OnDisplayedTimeChanged)));
        public static readonly DependencyProperty DisplayRowCountProperty = DependencyProperty.Register("DisplayRowCount", typeof(int?), typeof(GanttChartView), new PropertyMetadata(null, new PropertyChangedCallback(GanttChartView.OnDisplayRowCountChanged)));
        private Dictionary<DateTime, DateTime> getNextNonworkingTimeCache;
        private Dictionary<DateTime, DateTime> getNextVisibleNonworkingTimeCache;
        private Dictionary<DateTime, DateTime> getNextVisibleTimeCache;
        private Dictionary<DateTime, DateTime> getNextVisibleWorkingTimeCache;
        private Dictionary<DateTime, DateTime> getNextWorkingTimeCache;
        private Dictionary<DateTime, double> getPositionCache;
        private Dictionary<DateTime, DateTime> getPreviousNonworkingTimeCache;
        private Dictionary<DateTime, DateTime> getPreviousVisibleNonworkingTimeCache;
        private Dictionary<DateTime, DateTime> getPreviousVisibleTimeCache;
        private Dictionary<DateTime, DateTime> getPreviousVisibleWorkingTimeCache;
        private Dictionary<DateTime, DateTime> getPreviousWorkingTimeCache;
        public static readonly DependencyProperty HeaderBackgroundProperty = DependencyProperty.RegisterAttached("HeaderBackground", typeof(Brush), typeof(GanttChartView), new PropertyMetadata(null));
        public static readonly DependencyProperty HeaderHeightProperty = DependencyProperty.RegisterAttached("HeaderHeight", typeof(double), typeof(GanttChartView), new PropertyMetadata((double)1.0 / (double)0.0));
        private System.Windows.Controls.ScrollViewer headerScrollViewer;
        private ScrollBar horizontalScrollBar;
        public static readonly DependencyProperty HourWidthProperty = DependencyProperty.Register("HourWidth", typeof(double), typeof(GanttChartView), new PropertyMetadata(2.5, new PropertyChangedCallback(GanttChartView.OnHourWidthChanged)));
        private int internalUpdateItemsSourceCount;
        public static readonly DependencyProperty IsAsyncPresentationEnabledMinCountProperty = DependencyProperty.Register("IsAsyncPresentationEnabledMinCount", typeof(int), typeof(GanttChartView), new PropertyMetadata(0x100));
        public static readonly DependencyProperty IsAsyncPresentationEnabledPageSizeProperty = DependencyProperty.Register("IsAsyncPresentationEnabledPageSize", typeof(int), typeof(GanttChartView), new PropertyMetadata(0x10));
        public static readonly DependencyProperty IsAsyncPresentationEnabledProperty = DependencyProperty.Register("IsAsyncPresentationEnabled", typeof(bool), typeof(GanttChartView), new PropertyMetadata(true, new PropertyChangedCallback(GanttChartView.OnIsAsyncPresentationEnabledChanged)));
        private bool isAsyncTimerPaused;
        public static readonly DependencyProperty IsCurrentTimeLineVisibleProperty = DependencyProperty.Register("IsCurrentTimeLineVisible", typeof(bool), typeof(GanttChartView), new PropertyMetadata(true, new PropertyChangedCallback(GanttChartView.OnIsCurrentTimeLineVisibleChanged)));
        public static readonly DependencyProperty IsDependencyToolTipVisibleProperty = DependencyProperty.Register("IsDependencyToolTipVisible", typeof(bool), typeof(GanttChartView), new PropertyMetadata(true, new PropertyChangedCallback(GanttChartView.OnIsDependencyToolTipVisibleChanged)));
        private bool isDuringInternalScrollUpdate;
        private bool isDuringUpdateDisplayedTimeFromScroll;
        public static readonly DependencyProperty IsNonworkingTimeHighlightedProperty = DependencyProperty.Register("IsNonworkingTimeHighlighted", typeof(bool), typeof(GanttChartView), new PropertyMetadata(true, new PropertyChangedCallback(GanttChartView.OnIsNonworkingTimeHighlightedChanged)));
        public static readonly DependencyProperty IsReadOnlyProperty = DependencyProperty.Register("IsReadOnly", typeof(bool), typeof(GanttChartView), new PropertyMetadata(false, new PropertyChangedCallback(GanttChartView.OnIsReadOnlyChanged)));
        private bool isScheduleCachingEnabled;
        public static readonly DependencyProperty IsTaskCompletedEffortVisibleProperty = DependencyProperty.Register("IsTaskCompletedEffortVisible", typeof(bool), typeof(GanttChartView), new PropertyMetadata(true, new PropertyChangedCallback(GanttChartView.OnIsTaskCompletedEffortVisibleChanged)));
        public static readonly DependencyProperty IsTaskToolTipVisibleProperty = DependencyProperty.Register("IsTaskToolTipVisible", typeof(bool), typeof(GanttChartView), new PropertyMetadata(true, new PropertyChangedCallback(GanttChartView.OnIsTaskToolTipVisibleChanged)));
        private bool isTemplateApplied;
        public static readonly DependencyProperty IsVirtualizingProperty = DependencyProperty.Register("IsVirtualizing", typeof(bool), typeof(GanttChartView), new PropertyMetadata(true, new PropertyChangedCallback(GanttChartView.OnIsVirtualizingChanged)));
        public static readonly DependencyProperty ItemHeightProperty = DependencyProperty.Register("ItemHeight", typeof(double), typeof(GanttChartView), new PropertyMetadata((double)1.0 / (double)0.0, new PropertyChangedCallback(GanttChartView.OnItemHeightChanged)));
        private GanttChartItemCollection items;
        public static readonly DependencyProperty ItemsProperty = DependencyProperty.Register("Items", typeof(ObservableCollection<GanttChartItem>), typeof(GanttChartView), new PropertyMetadata(null, new PropertyChangedCallback(GanttChartView.OnItemsChanged)));
        private GanttChartItemCollection managedItems;
        private ObservableCollection<TimeInterval> managedNonworkingIntervals;
        private ScaleCollection managedScales;
        public static readonly DependencyProperty MilestoneBarFillProperty = DependencyProperty.RegisterAttached("MilestoneBarFill", typeof(Brush), typeof(GanttChartView), new PropertyMetadata(null));
        public static readonly DependencyProperty MilestoneBarStrokeProperty = DependencyProperty.RegisterAttached("MilestoneBarStroke", typeof(Brush), typeof(GanttChartView), new PropertyMetadata(null));
        public static readonly DependencyProperty MilestoneBarStrokeThicknessProperty = DependencyProperty.Register("MilestoneBarStrokeThickness", typeof(double), typeof(GanttChartView), new PropertyMetadata(0.0));
        public static readonly DependencyProperty MilestoneTaskTemplateProperty = DependencyProperty.Register("MilestoneTaskTemplate", typeof(DataTemplate), typeof(GanttChartView), new PropertyMetadata(null));
        public static readonly DependencyProperty NonworkingIntervalsProperty = DependencyProperty.Register("NonworkingIntervals", typeof(ObservableCollection<TimeInterval>), typeof(GanttChartView), new PropertyMetadata(null, new PropertyChangedCallback(GanttChartView.OnNonworkingIntervalsChanged)));
        public static readonly DependencyProperty NonworkingTimeBackgroundProperty = DependencyProperty.Register("NonworkingTimeBackground", typeof(Brush), typeof(GanttChartView), new PropertyMetadata(null));
        private ObservableCollection<GanttChartItem> originalItems;
        public static readonly DependencyProperty PredecessorToolTipTemplateProperty = DependencyProperty.Register("PredecessorToolTipTemplate", typeof(DataTemplate), typeof(GanttChartView), new PropertyMetadata(null));
        public static readonly DependencyProperty ScaleHeaderHeightProperty = DependencyProperty.Register("ScaleHeaderHeight", typeof(double), typeof(GanttChartView), new PropertyMetadata((double)1.0 / (double)0.0));
        public static readonly DependencyProperty ScalesProperty = DependencyProperty.RegisterAttached("Scales", typeof(ScaleCollection), typeof(GanttChartView), new PropertyMetadata(null, new PropertyChangedCallback(GanttChartView.OnScalesChanged)));
        private System.Windows.Controls.ScrollContentPresenter scrollContentPresenter;
        private System.Windows.Controls.ScrollViewer scrollViewer;
        private FrameworkElement scrollViewerRoot;
        public static readonly DependencyProperty StandardBarCornerRadiusProperty = DependencyProperty.Register("StandardBarCornerRadius", typeof(double), typeof(GanttChartView), new PropertyMetadata(0.0));
        public static readonly DependencyProperty StandardBarFillProperty = DependencyProperty.RegisterAttached("StandardBarFill", typeof(Brush), typeof(GanttChartView), new PropertyMetadata(null));
        public static readonly DependencyProperty StandardBarStrokeProperty = DependencyProperty.RegisterAttached("StandardBarStroke", typeof(Brush), typeof(GanttChartView), new PropertyMetadata(null));
        public static readonly DependencyProperty StandardBarStrokeThicknessProperty = DependencyProperty.Register("StandardBarStrokeThickness", typeof(double), typeof(GanttChartView), new PropertyMetadata(0.0));
        public static readonly DependencyProperty StandardCompletedBarCornerRadiusProperty = DependencyProperty.Register("StandardCompletedBarCornerRadius", typeof(double), typeof(GanttChartView), new PropertyMetadata(0.0));
        public static readonly DependencyProperty StandardCompletedBarFillProperty = DependencyProperty.RegisterAttached("StandardCompletedBarFill", typeof(Brush), typeof(GanttChartView), new PropertyMetadata(null));
        public static readonly DependencyProperty StandardCompletedBarStrokeProperty = DependencyProperty.RegisterAttached("StandardCompletedBarStroke", typeof(Brush), typeof(GanttChartView), new PropertyMetadata(null));
        public static readonly DependencyProperty StandardCompletedBarStrokeThicknessProperty = DependencyProperty.Register("StandardCompletedBarStrokeThickness", typeof(double), typeof(GanttChartView), new PropertyMetadata(0.0));
        public static readonly DependencyProperty StandardTaskTemplateProperty = DependencyProperty.Register("StandardTaskTemplate", typeof(DataTemplate), typeof(GanttChartView), new PropertyMetadata(null));
        public static readonly DependencyProperty SummaryBarFillProperty = DependencyProperty.RegisterAttached("SummaryBarFill", typeof(Brush), typeof(GanttChartView), new PropertyMetadata(null));
        public static readonly DependencyProperty SummaryBarStrokeProperty = DependencyProperty.RegisterAttached("SummaryBarStroke", typeof(Brush), typeof(GanttChartView), new PropertyMetadata(null));
        public static readonly DependencyProperty SummaryBarStrokeThicknessProperty = DependencyProperty.Register("SummaryBarStrokeThickness", typeof(double), typeof(GanttChartView), new PropertyMetadata(0.0));
        public static readonly DependencyProperty SummaryTaskTemplateProperty = DependencyProperty.Register("SummaryTaskTemplate", typeof(DataTemplate), typeof(GanttChartView), new PropertyMetadata(null));
        public static readonly DependencyProperty TaskCompletedEffortVisibilityProperty = DependencyProperty.Register("TaskCompletedEffortVisibility", typeof(Visibility), typeof(GanttChartView), new PropertyMetadata(Visibility.Visible));
        public static readonly DependencyProperty TaskToolTipVisibilityProperty = DependencyProperty.Register("TaskToolTipVisibility", typeof(Visibility), typeof(GanttChartView), new PropertyMetadata(Visibility.Visible));
        public static readonly DependencyProperty ThumbVisibilityProperty = DependencyProperty.Register("ThumbVisibility", typeof(Visibility), typeof(GanttChartView), new PropertyMetadata(Visibility.Visible));
        public static readonly DependencyProperty TimelinePageFinishProperty = DependencyProperty.Register("TimelinePageFinish", typeof(DateTime), typeof(GanttChartView), new PropertyMetadata(DateTime.Today.AddDays(1.0).AddMonths(3), new PropertyChangedCallback(GanttChartView.OnTimelinePageFinishChanged)));
        public static readonly DependencyProperty TimelinePageStartProperty = DependencyProperty.Register("TimelinePageStart", typeof(DateTime), typeof(GanttChartView), new PropertyMetadata(DateTime.Today.AddDays(-7.0), new PropertyChangedCallback(GanttChartView.OnTimelinePageStartChanged)));
        public static readonly DependencyProperty ToolTipTemplateProperty = DependencyProperty.Register("ToolTipTemplate", typeof(DataTemplate), typeof(GanttChartView), new PropertyMetadata(null));
        public static readonly DependencyProperty UpdateScaleIntervalProperty = DependencyProperty.Register("UpdateScaleInterval", typeof(TimeSpan), typeof(GanttChartView), new PropertyMetadata(TimeSpan.Zero));
        public static readonly DependencyProperty UpdateTimelinePageAmountProperty = DependencyProperty.Register("UpdateTimelinePageAmount", typeof(TimeSpan), typeof(GanttChartView), new PropertyMetadata(TimeSpan.Parse("7.00:00:00")));
        private ScrollBar verticalScrollBar;
        public static readonly DependencyProperty VisibleWeekFinishProperty = DependencyProperty.Register("VisibleWeekFinish", typeof(DayOfWeek), typeof(GanttChartView), new PropertyMetadata(DayOfWeek.Saturday, new PropertyChangedCallback(GanttChartView.OnVisibleWeekFinishChanged)));
        public static readonly DependencyProperty VisibleWeekStartProperty = DependencyProperty.Register("VisibleWeekStart", typeof(DayOfWeek), typeof(GanttChartView), new PropertyMetadata(DayOfWeek.Sunday, new PropertyChangedCallback(GanttChartView.OnVisibleWeekStartChanged)));
        public static readonly DependencyProperty WorkingTimeBackgroundProperty = DependencyProperty.Register("WorkingTimeBackground", typeof(Brush), typeof(GanttChartView), new PropertyMetadata(null));
        public static readonly DependencyProperty WorkingWeekFinishProperty = DependencyProperty.Register("WorkingWeekFinish", typeof(DayOfWeek), typeof(GanttChartView), new PropertyMetadata(DayOfWeek.Friday, new PropertyChangedCallback(GanttChartView.OnWorkingWeekFinishChanged)));
        public static readonly DependencyProperty WorkingWeekStartProperty = DependencyProperty.Register("WorkingWeekStart", typeof(DayOfWeek), typeof(GanttChartView), new PropertyMetadata(DayOfWeek.Monday, new PropertyChangedCallback(GanttChartView.OnWorkingWeekStartChanged)));

        // Modifs Tekigo : valeurs par défaut de Finish Start
        public static readonly DependencyProperty VisibleDayFinishProperty = DependencyProperty.Register("VisibleDayFinish", typeof(TimeOfDay), typeof(GanttChartView), new PropertyMetadata(TimeOfDay.Parse("24:00:00"), new PropertyChangedCallback(GanttChartView.OnVisibleDayFinishChanged)));
        public static readonly DependencyProperty VisibleDayStartProperty = DependencyProperty.Register("VisibleDayStart", typeof(TimeOfDay), typeof(GanttChartView), new PropertyMetadata(TimeOfDay.Parse("00:00:00"), new PropertyChangedCallback(GanttChartView.OnVisibleDayStartChanged)));
        public static readonly DependencyProperty WorkingDayFinishProperty = DependencyProperty.Register("WorkingDayFinish", typeof(TimeOfDay), typeof(GanttChartView), new PropertyMetadata(TimeOfDay.Parse("24:00:00"), new PropertyChangedCallback(GanttChartView.OnWorkingDayFinishChanged)));
        public static readonly DependencyProperty WorkingDayStartProperty = DependencyProperty.Register("WorkingDayStart", typeof(TimeOfDay), typeof(GanttChartView), new PropertyMetadata(TimeOfDay.Parse("00:00:00"), new PropertyChangedCallback(GanttChartView.OnWorkingDayStartChanged)));

        public event EventHandler ActualDisplayRowCountChanged;

        internal event EventHandler DecreaseTimelinePageProvider;

        public event EventHandler DisplayedTimeChanged;

        internal event EventHandler IncreaseTimelinePageProvider;

        public event ItemActivatedEventHandler ItemActivated;

        public event NotifyCollectionChangedEventHandler ItemCollectionChanged;

        public event PropertyChangedEventHandler ItemPropertyChanged;

        public event EventHandler TimelinePageChanged;

        public GanttChartView()
        {
            try
            {
                LicenseManager.Validate(typeof(GanttChartView));
            }
            catch (LicenseException)
            {
            }
            try
            {
                // Modif Tekigo
                GenericThemeResolver.Resolve(this);
            }
            catch
            {
            }
            if (this.Items == null)
            {
                this.Items = new ObservableCollection<GanttChartItem>();
            }
        }

        private void AddManagedItems(IList items)
        {
            foreach (GanttChartItem item in items)
            {
                item.ExpansionChanged += new EventHandler(this.Item_ExpansionChanged);
                item.ActualDisplayRowIndexChanged += new EventHandler(this.Item_ActualDisplayRowIndexChanged);
            }
            base.Dispatcher.BeginInvoke((Action)(() =>
            {
                this.UpdateActualDisplayRowCount();
                this.UpdateComputedHeight();
                this.UpdateVirtualizationVisibility();
            }));
        }

        private void AsyncTimer_Tick(object sender, EventArgs e)
        {
            if (this.asyncItemCount >= this.originalItems.Count)
            {
                this.asyncTimer.Stop();
            }
            else
            {
                for (int i = 0; i < Math.Min(this.IsAsyncPresentationEnabledPageSize, this.originalItems.Count - this.asyncItemCount); i++)
                {
                    this.items.Add(this.originalItems[this.asyncItemCount++]);
                }
            }
        }

        public void AttachItem(GanttChartItem item)
        {
            item.GanttChartView = this;
            if (item.GetValue(StandardBarFillProperty) == null)
            {
                BindingOperations.SetBinding(item, StandardBarFillProperty, new Binding("StandardBarFill") { Source = this });
            }
            if (item.GetValue(StandardBarStrokeProperty) == null)
            {
                BindingOperations.SetBinding(item, StandardBarStrokeProperty, new Binding("StandardBarStroke") { Source = this });
            }
            if (item.GetValue(StandardCompletedBarFillProperty) == null)
            {
                BindingOperations.SetBinding(item, StandardCompletedBarFillProperty, new Binding("StandardCompletedBarFill") { Source = this });
            }
            if (item.GetValue(StandardCompletedBarStrokeProperty) == null)
            {
                BindingOperations.SetBinding(item, StandardCompletedBarStrokeProperty, new Binding("StandardCompletedBarStroke") { Source = this });
            }
            if (item.GetValue(SummaryBarFillProperty) == null)
            {
                BindingOperations.SetBinding(item, SummaryBarFillProperty, new Binding("SummaryBarFill") { Source = this });
            }
            if (item.GetValue(SummaryBarStrokeProperty) == null)
            {
                BindingOperations.SetBinding(item, SummaryBarStrokeProperty, new Binding("SummaryBarStroke") { Source = this });
            }
            if (item.GetValue(MilestoneBarFillProperty) == null)
            {
                BindingOperations.SetBinding(item, MilestoneBarFillProperty, new Binding("MilestoneBarFill") { Source = this });
            }
            if (item.GetValue(MilestoneBarStrokeProperty) == null)
            {
                BindingOperations.SetBinding(item, MilestoneBarStrokeProperty, new Binding("MilestoneBarStroke") { Source = this });
            }
            if (item.GetValue(DependencyLineStrokeProperty) == null)
            {
                BindingOperations.SetBinding(item, DependencyLineStrokeProperty, new Binding("DependencyLineStroke") { Source = this });
            }
            item.UpdateComputedItemTop();
            item.UpdateComputedTaskTemplate();
            item.UpdateBar();
            item.UpdateDependencyLines();
        }

        private void ClearManagedItems()
        {
            foreach (GanttChartItem item in this.managedItems)
            {
                item.ActualDisplayRowIndexChanged -= new EventHandler(this.Item_ActualDisplayRowIndexChanged);
                item.ExpansionChanged -= new EventHandler(this.Item_ExpansionChanged);
            }
        }

        public void ClearScheduleCacheValues()
        {
            if (this.getNextWorkingTimeCache != null)
            {
                this.getNextWorkingTimeCache.Clear();
            }
            if (this.getPreviousWorkingTimeCache != null)
            {
                this.getPreviousWorkingTimeCache.Clear();
            }
            if (this.getNextVisibleTimeCache != null)
            {
                this.getNextVisibleTimeCache.Clear();
            }
            if (this.getPreviousVisibleTimeCache != null)
            {
                this.getPreviousVisibleTimeCache.Clear();
            }
            if (this.getNextVisibleWorkingTimeCache != null)
            {
                this.getNextVisibleWorkingTimeCache.Clear();
            }
            if (this.getPreviousVisibleWorkingTimeCache != null)
            {
                this.getPreviousVisibleWorkingTimeCache.Clear();
            }
            if (this.getNextNonworkingTimeCache != null)
            {
                this.getNextNonworkingTimeCache.Clear();
            }
            if (this.getPreviousNonworkingTimeCache != null)
            {
                this.getPreviousNonworkingTimeCache.Clear();
            }
            if (this.getNextVisibleNonworkingTimeCache != null)
            {
                this.getNextVisibleNonworkingTimeCache.Clear();
            }
            if (this.getPreviousVisibleNonworkingTimeCache != null)
            {
                this.getPreviousVisibleNonworkingTimeCache.Clear();
            }
            if (this.getPositionCache != null)
            {
                this.getPositionCache.Clear();
            }
        }

        protected void CoerceTimelinePage()
        {
            if (this.TimelinePageFinish <= this.TimelinePageStart)
            {
                this.TimelinePageFinish = this.TimelinePageStart.AddTicks(1L);
            }
        }

        private void CoerceVisibleDay()
        {
            if (this.VisibleDayFinish <= this.VisibleDayStart)
            {
                this.VisibleDayFinish = this.VisibleDayStart;
            }
        }

        private void CoerceVisibleWeek()
        {
            if (this.VisibleWeekStart < DayOfWeek.Sunday)
            {
                this.VisibleWeekStart = DayOfWeek.Sunday;
            }
            if (this.VisibleWeekStart > DayOfWeek.Saturday)
            {
                this.VisibleWeekStart = DayOfWeek.Saturday;
            }
            if (this.VisibleWeekFinish < DayOfWeek.Sunday)
            {
                this.VisibleWeekFinish = DayOfWeek.Sunday;
            }
            if (this.VisibleWeekFinish > DayOfWeek.Saturday)
            {
                this.VisibleWeekFinish = DayOfWeek.Saturday;
            }
            if (this.VisibleWeekFinish <= this.VisibleWeekStart)
            {
                this.VisibleWeekFinish = this.VisibleWeekStart;
            }
        }

        private void CoerceWorkingDay()
        {
            if (this.WorkingDayFinish <= this.WorkingDayStart)
            {
                this.WorkingDayFinish = this.WorkingDayStart;
            }
        }

        private void CoerceWorkingWeek()
        {
            if (this.WorkingWeekFinish <= this.WorkingWeekStart)
            {
                this.WorkingWeekFinish = this.WorkingWeekStart;
            }
        }

        public void CollapseAll()
        {
            if (this.managedItems != null && this.managedItems.Any())
            {
                var maxIndentation = this.managedItems.Max(m => m.Indentation);

                for (int i = maxIndentation; i >= 0; i--)
                {
                    foreach (GanttChartItem item in this.managedItems.Where(m => m.Indentation == i))
                    {
                        if (item.HasChildren)
                            item.IsExpanded = false;
                    }
                }

                this.UpdateBars();
            }
        }

        public void ContinueAsyncPresentation()
        {
            if (this.isAsyncTimerPaused)
            {
                this.isAsyncTimerPaused = false;
                if (this.asyncTimer != null)
                {
                    this.asyncTimer.Start();
                }
            }
        }

        public void DecreaseTimelinePage()
        {
            DateTime timelinePageStart = this.TimelinePageStart;
            DateTime timelinePageFinish = this.TimelinePageFinish;
            timelinePageStart -= this.UpdateTimelinePageAmount;
            timelinePageFinish -= this.UpdateTimelinePageAmount;
            this.SetTimelinePage(timelinePageStart, timelinePageFinish);
        }

        private void DecreaseTimelinePageButton_Click(object sender, RoutedEventArgs e)
        {
            if (this.DecreaseTimelinePageProvider != null)
            {
                this.DecreaseTimelinePageProvider(this, EventArgs.Empty);
            }
            else
            {
                this.DecreaseTimelinePage();
            }
        }

        private static bool DefaultDependencyCreationValidatorProvider(GanttChartItem dependentItem, GanttChartItem item)
        {
            GanttChartView ganttChartView = dependentItem.GanttChartView as GanttChartView;
            if ((ganttChartView == null) || (item.GanttChartView != ganttChartView))
            {
                return false;
            }
            GanttChartItemCollection managedItems = ganttChartView.ManagedItems;
            if (managedItems == null)
            {
                return false;
            }
            return ((((item != dependentItem) && !managedItems.GetAllChildren(item).Contains<GanttChartItem>(dependentItem)) && (!managedItems.GetAllChildren(dependentItem).Contains<GanttChartItem>(item) && !item.Predecessors.Any<PredecessorItem>(p => (p.Item == dependentItem)))) && !dependentItem.Predecessors.Any<PredecessorItem>(p => (p.Item == item)));
        }

        private static bool DefaultDependencyDeletionValidatorProvider(PredecessorItem predecessorItem)
        {
            return true;
        }

        private void DeleteScheduleCaches()
        {
            this.getNextWorkingTimeCache = null;
            this.getPreviousWorkingTimeCache = null;
            this.getNextVisibleTimeCache = null;
            this.getPreviousVisibleTimeCache = null;
            this.getNextVisibleWorkingTimeCache = null;
            this.getPreviousVisibleWorkingTimeCache = null;
            this.getNextNonworkingTimeCache = null;
            this.getPreviousNonworkingTimeCache = null;
            this.getNextVisibleNonworkingTimeCache = null;
            this.getPreviousVisibleNonworkingTimeCache = null;
            this.getPositionCache = null;
        }

        public void ExpandAll()
        {
            if (this.managedItems != null)
            {
                foreach (GanttChartItem item in this.managedItems)
                {
                    if (item.HasChildren)
                    {
                        item.IsExpanded = true;
                    }
                }
            }
        }

        public void Export(Delegate action)
        {
            this.PrepareExport();
            base.Dispatcher.BeginInvoke(action, new object[0]);
        }

        private void GanttChartView_MouseButtonClick(object sender, MouseButtonEventArgs e)
        {
            if (e.ChangedButton == MouseButton.Left)
            {
                FrameworkElement originalSource = e.OriginalSource as FrameworkElement;
                if (originalSource != null)
                {
                    GanttChartItem dataContext = originalSource.DataContext as GanttChartItem;
                    if (dataContext != null)
                    {
                        this.OnItemActivated(dataContext);
                    }
                }
            }
        }

        public IEnumerable<GanttChartItem> GetAllChildren(GanttChartItem item)
        {
            if (this.managedItems == null)
            {
                return null;
            }
            return this.managedItems.GetAllChildren(item);
        }

        public IEnumerable<GanttChartItem> GetAllChildren(int index)
        {
            if (this.managedItems == null)
            {
                return null;
            }
            return this.managedItems.GetAllChildren(index);
        }

        public IEnumerable<GanttChartItem> GetAllParents(GanttChartItem item)
        {
            if (this.managedItems == null)
            {
                return null;
            }
            return this.managedItems.GetAllParents(item);
        }

        public IEnumerable<GanttChartItem> GetAllParents(int index)
        {
            if (this.managedItems == null)
            {
                return null;
            }
            return this.managedItems.GetAllParents(index);
        }

        public IEnumerable<GanttChartItem> GetChildren(GanttChartItem item)
        {
            if (this.managedItems == null)
            {
                return null;
            }
            return this.managedItems.GetChildren(item);
        }

        public IEnumerable<GanttChartItem> GetChildren(int index)
        {
            if (this.managedItems == null)
            {
                return null;
            }
            return this.managedItems.GetChildren(index);
        }

        public static Visibility GetComputedDecreaseTimelinePageButtonVisibility(DependencyObject d)
        {
            return (Visibility)d.GetValue(ComputedDecreaseTimelinePageButtonVisibilityProperty);
        }

        public static Visibility GetComputedIncreaseTimelinePageButtonVisibility(DependencyObject d)
        {
            return (Visibility)d.GetValue(ComputedIncreaseTimelinePageButtonVisibilityProperty);
        }

        public static double GetComputedWidth(DependencyObject d)
        {
            return (double)d.GetValue(ComputedWidthProperty);
        }

        internal virtual double GetContentHeight()
        {
            return (this.ItemHeight * this.ActualDisplayRowCount);
        }

        public DateTime GetDateTime(double position)
        {
            TimeSpan span;
            DateTime visibleWeekStart = this.GetVisibleWeekStart(this.TimelinePageStart, out span);
            double num = span.TotalHours * this.HourWidth;
            double x = position + num;
            TimeSpan span5 = (TimeSpan)(this.VisibleDayFinish - this.VisibleDayStart);
            double y = this.HourWidth * span5.TotalHours;
            double num4 = y * ((double)((this.VisibleWeekFinish - this.VisibleWeekStart) + 1));
            double num5 = Math.IEEERemainder(x, num4);
            while (num5 < 0.0)
            {
                num5 += num4;
            }
            TimeSpan span2 = TimeSpan.FromDays(((x - num5) / num4) * 7.0);
            double num6 = Math.IEEERemainder(num5, y);
            while (num6 < 0.0)
            {
                num6 += y;
            }
            TimeSpan span3 = TimeSpan.FromDays((num5 - num6) / y);
            TimeSpan span4 = TimeSpan.FromHours(num6 / this.HourWidth);
            return visibleWeekStart + span2 + span3 + this.VisibleDayStart + span4;
        }

        public static Brush GetDependencyLineStroke(DependencyObject d)
        {
            return (Brush)d.GetValue(DependencyLineStrokeProperty);
        }

        public TimeSpan GetEffort(DateTime start, DateTime finish)
        {
            TimeSpan zero = TimeSpan.Zero;
            start = this.GetNextWorkingTime(start);
            while (start < finish)
            {
                DateTime nextNonworkingTime = this.GetNextNonworkingTime(start);
                if (nextNonworkingTime > finish)
                {
                    nextNonworkingTime = finish;
                }
                zero += nextNonworkingTime - start;
                start = this.GetNextWorkingTime(nextNonworkingTime);
            }
            return zero;
        }

        public BitmapSource GetExportBitmapSource()
        {
            return this.GetExportBitmapSource(this.GetExportSize(), 0, 0);
        }

        internal BitmapSource GetExportBitmapSource(Size pageSize, int i, int j)
        {
            DrawingVisual visual = this.GetExportDrawingVisual(pageSize, i, j);
            RenderTargetBitmap bitmap = new RenderTargetBitmap((int)Math.Ceiling(pageSize.Width), (int)Math.Ceiling(pageSize.Height), 96.0, 96.0, PixelFormats.Default);
            bitmap.Render(visual);
            return bitmap;
        }

        public BitmapSource[,] GetExportBitmapSources(Size pageSize)
        {
            int exportVerticalLength = this.GetExportVerticalLength(pageSize);
            int exportHorizontalLength = this.GetExportHorizontalLength(pageSize);
            BitmapSource[,] sourceArray = new BitmapSource[exportVerticalLength, exportHorizontalLength];
            for (int i = 0; i < exportVerticalLength; i++)
            {
                for (int j = 0; j < exportHorizontalLength; j++)
                {
                    sourceArray[i, j] = this.GetExportBitmapSource(pageSize, i, j);
                }
            }
            return sourceArray;
        }

        internal DrawingVisual GetExportDrawingVisual(Size pageSize, int i, int j)
        {
            double headerHeight = this.HeaderHeight;
            double contentHeight = this.GetContentHeight();
            double actualWidth = this.ContentElement.ActualWidth;
            DrawingVisual visual = new DrawingVisual();
            using (DrawingContext context = visual.RenderOpen())
            {
                context.DrawRectangle(new SolidColorBrush(Colors.White), null, new Rect(0.0, 0.0, pageSize.Width, pageSize.Height));
                context.PushClip(new RectangleGeometry(new Rect(0.0, 0.0, pageSize.Width, headerHeight)));
                VisualBrush brush = new VisualBrush(this.HeaderElement)
                {
                    Stretch = Stretch.None,
                    AlignmentX = AlignmentX.Left
                };
                context.DrawRectangle(brush, null, new Rect(-(j * pageSize.Width), 0.0, actualWidth, headerHeight));
                context.Pop();
                context.PushClip(new RectangleGeometry(new Rect(0.0, headerHeight, pageSize.Width, pageSize.Height - headerHeight)));
                VisualBrush brush2 = new VisualBrush(this.ContentElement)
                {
                    Stretch = Stretch.None,
                    AlignmentX = AlignmentX.Left,
                    AlignmentY = AlignmentY.Top
                };
                context.DrawRectangle(brush2, null, new Rect(-(j * pageSize.Width), -(i * (pageSize.Height - headerHeight)) + headerHeight, actualWidth, contentHeight));
                context.Pop();
            }
            return visual;
        }

        private int GetExportHorizontalLength(Size pageSize)
        {
            return (int)Math.Ceiling((double)(this.GetExportSize().Width / pageSize.Width));
        }

        public Size GetExportSize()
        {
            return new Size(this.ContentElement.ActualWidth, this.HeaderHeight + this.GetContentHeight());
        }

        private int GetExportVerticalLength(Size pageSize)
        {
            Size exportSize = this.GetExportSize();
            return (int)Math.Ceiling((double)(Math.Max((double)0.0, (double)(exportSize.Height - this.HeaderHeight)) / Math.Max((double)0.0, (double)(pageSize.Height - this.HeaderHeight))));
        }

        public DateTime GetFinish(DateTime start, TimeSpan effort)
        {
            start = this.GetNextWorkingTime(start);
            DateTime dateTime = start;
            while (effort > TimeSpan.Zero)
            {
                dateTime = this.GetNextNonworkingTime(start);
                if ((dateTime - start) > effort)
                {
                    dateTime = start.Add(effort);
                }
                effort -= dateTime - start;
                start = this.GetNextWorkingTime(dateTime);
            }
            return dateTime;
        }

        public static Brush GetHeaderBackground(DependencyObject d)
        {
            return (Brush)d.GetValue(HeaderBackgroundProperty);
        }

        public static double GetHeaderHeight(DependencyObject d)
        {
            return (double)d.GetValue(HeaderHeightProperty);
        }

        public GanttChartItem GetItemAt(double position)
        {
            if (this.managedItems != null)
            {
                int itemIndexAt = this.GetItemIndexAt(position);
                if ((itemIndexAt >= 0) && (itemIndexAt < this.managedItems.Count))
                {
                    return this.managedItems[itemIndexAt];
                }
            }
            return null;
        }

        public int GetItemIndexAt(double position)
        {
            if (position >= 0.0)
            {
                int num = (int)(position / this.ItemHeight);
                if ((this.managedItems == null) || (num < 0))
                {
                    return -1;
                }
                for (int i = 0; i < this.managedItems.Count; i++)
                {
                    if (this.managedItems[i].IsVisible && (this.managedItems[i].ActualDisplayRowIndex == num))
                    {
                        return i;
                    }
                }
            }
            return -1;
        }

        public double GetItemTop(GanttChartItem item)
        {
            if (!item.IsVisible)
            {
                return double.NaN;
            }
            return item.ComputedItemTop;
        }

        public double GetItemTop(int index)
        {
            if (this.managedItems == null)
            {
                return double.NaN;
            }
            return this.GetItemTop(this.managedItems[index]);
        }

        public static Brush GetMilestoneBarFill(DependencyObject d)
        {
            return (Brush)d.GetValue(MilestoneBarFillProperty);
        }

        public static Brush GetMilestoneBarStroke(DependencyObject d)
        {
            return (Brush)d.GetValue(MilestoneBarStrokeProperty);
        }

        public DateTime GetNextNonworkingTime(DateTime dateTime)
        {
            bool flag;
            DateTime key = dateTime;
            if (this.IsScheduleCachingEnabled && this.getNextNonworkingTimeCache.ContainsKey(key))
            {
                return this.getNextNonworkingTimeCache[key];
            }

            // AJOUT TEKIGO : si on est en mode "travail continu", il est impossible de trouver un NextNonworkingTime
            if (this.WorkingWeekFinish - this.WorkingWeekStart == 6 &&
                this.WorkingDayFinish - this.WorkingDayStart >= TimeOfDay.FromDays(1))
            {
                return DateTime.MaxValue;
            }


            do
            {
                flag = true;
                DayOfWeek dayOfWeek = dateTime.DayOfWeek;
                if ((dayOfWeek >= this.WorkingWeekStart) && (dayOfWeek <= this.WorkingWeekFinish))
                {
                    bool flag2;
                    TimeOfDay timeOfDay = dateTime.TimeOfDay;
                    if ((timeOfDay < this.WorkingDayStart) || (timeOfDay >= this.WorkingDayFinish))
                    {
                        break;
                    }
                    dateTime = this.GetNonworkingIntervalStart(dateTime, dateTime.Date.Add((TimeSpan)this.WorkingDayFinish), out flag2);
                    if (flag2)
                    {
                        return dateTime;
                    }
                    flag = false;
                }
            }
            while (!flag);
            if (this.IsScheduleCachingEnabled)
            {
                this.getNextNonworkingTimeCache.Add(key, dateTime);
            }
            return dateTime;
        }

        public DateTime GetNextVisibleNonworkingTime(DateTime dateTime)
        {
            bool flag;
            if (dateTime < this.TimelinePageStart)
            {
                dateTime = this.TimelinePageStart;
            }
            DateTime key = dateTime;
            if (this.IsScheduleCachingEnabled && this.getNextVisibleNonworkingTimeCache.ContainsKey(key))
            {
                return this.getNextVisibleNonworkingTimeCache[key];
            }
            do
            {
                flag = true;
                dateTime = this.GetNextNonworkingTime(dateTime);
                DayOfWeek dayOfWeek = dateTime.DayOfWeek;
                while ((dayOfWeek < this.VisibleWeekStart) || (dayOfWeek > this.VisibleWeekFinish))
                {
                    dateTime = dateTime.Date.AddDays(1.0);
                    dayOfWeek = dateTime.DayOfWeek;
                    flag = false;
                }
                TimeOfDay timeOfDay = dateTime.TimeOfDay;
                if (timeOfDay < this.VisibleDayStart)
                {
                    dateTime = dateTime.Date.Add((TimeSpan)this.VisibleDayStart);
                    timeOfDay = this.VisibleDayStart;
                    flag = false;
                }
                if (timeOfDay > this.VisibleDayFinish)
                {
                    dateTime = dateTime.Date.AddDays(1.0);
                    flag = false;
                }
            }
            while (!flag);
            if (dateTime > this.TimelinePageFinish)
            {
                dateTime = this.TimelinePageFinish;
            }
            if (this.IsScheduleCachingEnabled)
            {
                this.getNextVisibleNonworkingTimeCache.Add(key, dateTime);
            }
            return dateTime;
        }

        public DateTime GetNextVisibleTime(DateTime dateTime)
        {
            bool flag;
            if (dateTime < this.TimelinePageStart)
            {
                dateTime = this.TimelinePageStart;
            }
            DateTime key = dateTime;
            if (this.IsScheduleCachingEnabled && this.getNextVisibleTimeCache.ContainsKey(key))
            {
                return this.getNextVisibleTimeCache[key];
            }
            do
            {
                if (dateTime > this.TimelinePageFinish)
                {
                    return this.TimelinePageFinish;
                }
                flag = true;
                DayOfWeek dayOfWeek = dateTime.DayOfWeek;
                while ((dayOfWeek < this.VisibleWeekStart) || (dayOfWeek > this.VisibleWeekFinish))
                {
                    dateTime = dateTime.Date.AddDays(1.0);
                    dayOfWeek = dateTime.DayOfWeek;
                    flag = false;
                }
                TimeOfDay timeOfDay = dateTime.TimeOfDay;
                if (timeOfDay < this.VisibleDayStart)
                {
                    dateTime = dateTime.Date.Add((TimeSpan)this.VisibleDayStart);
                    timeOfDay = this.VisibleDayStart;
                    flag = false;
                }
                if (timeOfDay >= this.VisibleDayFinish)
                {
                    dateTime = dateTime.Date.AddDays(1.0);
                    flag = false;
                }
            }
            while (!flag);
            if (this.IsScheduleCachingEnabled)
            {
                this.getNextVisibleTimeCache.Add(key, dateTime);
            }
            return dateTime;
        }

        public DateTime GetNextVisibleWorkingTime(DateTime dateTime)
        {
            bool flag;
            if (dateTime < this.TimelinePageStart)
            {
                dateTime = this.TimelinePageStart;
            }
            DateTime key = dateTime;
            if (this.IsScheduleCachingEnabled && this.getNextVisibleWorkingTimeCache.ContainsKey(key))
            {
                return this.getNextVisibleWorkingTimeCache[key];
            }
            do
            {
                flag = true;
                dateTime = this.GetNextWorkingTime(dateTime);
                DayOfWeek dayOfWeek = dateTime.DayOfWeek;
                while ((dayOfWeek < this.VisibleWeekStart) || (dayOfWeek > this.VisibleWeekFinish))
                {
                    dateTime = dateTime.Date.AddDays(1.0);
                    dayOfWeek = dateTime.DayOfWeek;
                    flag = false;
                }
                TimeOfDay timeOfDay = dateTime.TimeOfDay;
                if (timeOfDay < this.VisibleDayStart)
                {
                    dateTime = dateTime.Date.Add((TimeSpan)this.VisibleDayStart);
                    timeOfDay = this.VisibleDayStart;
                    flag = false;
                }
                if (timeOfDay >= this.VisibleDayFinish)
                {
                    dateTime = dateTime.Date.AddDays(1.0);
                    flag = false;
                }
            }
            while (!flag);
            if (dateTime > this.TimelinePageFinish)
            {
                dateTime = this.TimelinePageFinish;
            }
            if (this.IsScheduleCachingEnabled)
            {
                this.getNextVisibleWorkingTimeCache.Add(key, dateTime);
            }
            return dateTime;
        }

        public DateTime GetNextWorkingTime(DateTime dateTime)
        {
            bool flag;
            DateTime key = dateTime;
            if (this.IsScheduleCachingEnabled && this.getNextWorkingTimeCache.ContainsKey(key))
            {
                return this.getNextWorkingTimeCache[key];
            }
            do
            {
                flag = true;
                if (this.NonworkingIntervals != null)
                {
                    foreach (TimeInterval interval in this.NonworkingIntervals)
                    {
                        if ((dateTime >= interval.Start) && (dateTime < interval.Finish))
                        {
                            dateTime = interval.Finish;
                            flag = false;
                        }
                    }
                }
                DayOfWeek dayOfWeek = dateTime.DayOfWeek;
                while ((dayOfWeek < this.WorkingWeekStart) || (dayOfWeek > this.WorkingWeekFinish))
                {
                    dateTime = dateTime.Date.AddDays(1.0);
                    dayOfWeek = dateTime.DayOfWeek;
                    flag = false;
                }
                TimeOfDay timeOfDay = dateTime.TimeOfDay;
                if (timeOfDay < this.WorkingDayStart)
                {
                    dateTime = dateTime.Date.Add((TimeSpan)this.WorkingDayStart);
                    timeOfDay = this.WorkingDayStart;
                    flag = false;
                }
                if (timeOfDay >= this.WorkingDayFinish)
                {
                    dateTime = dateTime.Date.AddDays(1.0);
                    flag = false;
                }
            }
            while (!flag);
            if (this.IsScheduleCachingEnabled)
            {
                this.getNextWorkingTimeCache.Add(key, dateTime);
            }
            return dateTime;
        }

        private DateTime GetNonworkingIntervalFinish(DateTime dateTime, DateTime proposedDateTime, out bool hasIntervalBeenFound)
        {
            hasIntervalBeenFound = false;
            if (this.NonworkingIntervals != null)
            {
                foreach (TimeInterval interval in this.NonworkingIntervals)
                {
                    if ((interval.Finish <= dateTime) && (interval.Finish > proposedDateTime))
                    {
                        proposedDateTime = interval.Finish;
                        hasIntervalBeenFound = true;
                    }
                }
            }
            return proposedDateTime;
        }

        private DateTime GetNonworkingIntervalStart(DateTime dateTime, DateTime proposedDateTime, out bool hasIntervalBeenFound)
        {
            hasIntervalBeenFound = false;
            if (this.NonworkingIntervals != null)
            {
                foreach (TimeInterval interval in this.NonworkingIntervals)
                {
                    if ((interval.Start >= dateTime) && (interval.Start < proposedDateTime))
                    {
                        proposedDateTime = interval.Start;
                        hasIntervalBeenFound = true;
                    }
                }
            }
            return proposedDateTime;
        }

        public GanttChartItem GetParent(GanttChartItem item)
        {
            if (this.managedItems == null)
            {
                return null;
            }
            return this.managedItems.GetParent(item);
        }

        public GanttChartItem GetParent(int index)
        {
            if (this.managedItems == null)
            {
                return null;
            }
            return this.managedItems.GetParent(index);
        }

        public double GetPosition(DateTime dateTime)
        {
            TimeSpan span;
            TimeSpan span2;
            if (this.IsScheduleCachingEnabled && this.getPositionCache.ContainsKey(dateTime))
            {
                return this.getPositionCache[dateTime];
            }
            DateTime visibleWeekStart = this.GetVisibleWeekStart(dateTime, out span);
            DateTime time2 = this.GetVisibleWeekStart(this.TimelinePageStart, out span2);
            TimeSpan span3 = (TimeSpan)(this.VisibleDayFinish - this.VisibleDayStart);
            double num = this.HourWidth * span3.TotalHours;
            double num2 = num * ((double)((this.VisibleWeekFinish - this.VisibleWeekStart) + 1));
            TimeSpan span4 = (TimeSpan)(visibleWeekStart - time2);
            double num3 = (span4.TotalDays / 7.0) * num2;
            double num4 = num3 + ((span.TotalHours - span2.TotalHours) * this.HourWidth);
            if (this.IsScheduleCachingEnabled)
            {
                this.getPositionCache.Add(dateTime, num4);
            }
            return num4;
        }

        public IEnumerable<GanttChartItem> GetPredecessors(GanttChartItem item)
        {
            if (this.managedItems == null)
            {
                return null;
            }
            return this.managedItems.GetPredecessors(item);
        }

        public DateTime GetPreviousNonworkingTime(DateTime dateTime)
        {
            bool flag;
            DateTime key = dateTime;
            if (this.IsScheduleCachingEnabled && this.getPreviousNonworkingTimeCache.ContainsKey(key))
            {
                return this.getPreviousNonworkingTimeCache[key];
            }

            if (this.NonworkingIntervals != null && this.NonworkingIntervals.Any())
            {
                do
                {
                    flag = true;
                    DateTime time2 = (dateTime.TimeOfDay > TimeSpan.Zero) ? dateTime.Date : dateTime.Date.AddDays(-1.0);
                    DayOfWeek dayOfWeek = time2.DayOfWeek;
                    if ((dayOfWeek >= this.WorkingWeekStart) && (dayOfWeek <= this.WorkingWeekFinish))
                    {
                        TimeOfDay day = (dateTime.TimeOfDay > TimeSpan.Zero) ? (TimeOfDay)dateTime.TimeOfDay : TimeOfDay.MaxValue;
                        if ((day > this.WorkingDayStart) && (day <= this.WorkingDayFinish))
                        {
                            bool flag2;
                            dateTime = this.GetNonworkingIntervalFinish(dateTime, time2.Add((TimeSpan)this.WorkingDayStart), out flag2);
                            if (flag2)
                            {
                                return dateTime;
                            }
                            flag = false;
                        }
                    }
                }
                while (!flag);
            }

            if (this.IsScheduleCachingEnabled)
            {
                this.getPreviousNonworkingTimeCache.Add(key, dateTime);
            }
            return dateTime;
        }

        public DateTime GetPreviousVisibleNonworkingTime(DateTime dateTime)
        {
            bool flag;
            if (dateTime > this.TimelinePageFinish)
            {
                dateTime = this.TimelinePageFinish;
            }
            DateTime key = dateTime;
            if (this.IsScheduleCachingEnabled && this.getPreviousVisibleNonworkingTimeCache.ContainsKey(key))
            {
                return this.getPreviousVisibleNonworkingTimeCache[key];
            }
            do
            {
                flag = true;
                dateTime = this.GetPreviousNonworkingTime(dateTime);
                DateTime time2 = (dateTime.TimeOfDay > TimeSpan.Zero) ? dateTime.Date : dateTime.Date.AddDays(-1.0);
                TimeOfDay maxValue = (dateTime.TimeOfDay > TimeSpan.Zero) ? (TimeOfDay)dateTime.TimeOfDay : TimeOfDay.MaxValue;
                DayOfWeek dayOfWeek = time2.DayOfWeek;
                while ((dayOfWeek > this.VisibleWeekFinish) || (dayOfWeek < this.VisibleWeekStart))
                {
                    dateTime = time2;
                    time2 = time2.AddDays(-1.0);
                    maxValue = TimeOfDay.MaxValue;
                    dayOfWeek = time2.DayOfWeek;
                    flag = false;
                }
                if (maxValue > this.VisibleDayFinish)
                {
                    dateTime = time2.Add((TimeSpan)this.VisibleDayFinish);
                    maxValue = this.VisibleDayFinish;
                    flag = false;
                }
                if (maxValue < this.VisibleDayStart)
                {
                    dateTime = time2;
                    flag = false;
                }
            }
            while (!flag);
            if (dateTime < this.TimelinePageStart)
            {
                dateTime = this.TimelinePageStart;
            }
            if (this.IsScheduleCachingEnabled)
            {
                this.getPreviousVisibleNonworkingTimeCache.Add(key, dateTime);
            }
            return dateTime;
        }

        public DateTime GetPreviousVisibleTime(DateTime dateTime)
        {
            bool flag;
            if (dateTime > this.TimelinePageFinish)
            {
                dateTime = this.TimelinePageFinish;
            }
            DateTime key = dateTime;
            if (this.IsScheduleCachingEnabled && this.getPreviousVisibleTimeCache.ContainsKey(key))
            {
                return this.getPreviousVisibleTimeCache[key];
            }
            do
            {
                if (dateTime < this.TimelinePageStart)
                {
                    return this.TimelinePageStart;
                }
                flag = true;
                DateTime time2 = (dateTime.TimeOfDay > TimeSpan.Zero) ? dateTime.Date : dateTime.Date.AddDays(-1.0);
                TimeOfDay maxValue = (dateTime.TimeOfDay > TimeSpan.Zero) ? (TimeOfDay)dateTime.TimeOfDay : TimeOfDay.MaxValue;
                DayOfWeek dayOfWeek = time2.DayOfWeek;
                while ((dayOfWeek > this.VisibleWeekFinish) || (dayOfWeek < this.VisibleWeekStart))
                {
                    dateTime = time2;
                    time2 = time2.AddDays(-1.0);
                    maxValue = TimeOfDay.MaxValue;
                    dayOfWeek = time2.DayOfWeek;
                    flag = false;
                }
                if (maxValue > this.VisibleDayFinish)
                {
                    dateTime = time2.Add((TimeSpan)this.VisibleDayFinish);
                    maxValue = this.VisibleDayFinish;
                    flag = false;
                }
                if (maxValue <= this.VisibleDayStart)
                {
                    dateTime = time2;
                    flag = false;
                }
            }
            while (!flag);
            if (this.IsScheduleCachingEnabled)
            {
                this.getPreviousVisibleTimeCache.Add(key, dateTime);
            }
            return dateTime;
        }

        public DateTime GetPreviousVisibleWorkingTime(DateTime dateTime)
        {
            bool flag;
            if (dateTime > this.TimelinePageFinish)
            {
                dateTime = this.TimelinePageFinish;
            }
            DateTime key = dateTime;
            if (this.IsScheduleCachingEnabled && this.getPreviousVisibleWorkingTimeCache.ContainsKey(key))
            {
                return this.getPreviousVisibleWorkingTimeCache[key];
            }
            do
            {
                flag = true;
                dateTime = this.GetPreviousWorkingTime(dateTime);
                DateTime time2 = (dateTime.TimeOfDay > TimeSpan.Zero) ? dateTime.Date : dateTime.Date.AddDays(-1.0);
                DayOfWeek dayOfWeek = time2.DayOfWeek;
                while ((dayOfWeek > this.VisibleWeekFinish) || (dayOfWeek < this.VisibleWeekStart))
                {
                    dateTime = time2;
                    time2 = time2.AddDays(-1.0);
                    dayOfWeek = time2.DayOfWeek;
                    flag = false;
                }
                TimeOfDay visibleDayFinish = (dateTime.TimeOfDay > TimeSpan.Zero) ? (TimeOfDay)dateTime.TimeOfDay : TimeOfDay.MaxValue;
                if (visibleDayFinish > this.VisibleDayFinish)
                {
                    dateTime = time2.Add((TimeSpan)this.VisibleDayFinish);
                    visibleDayFinish = this.VisibleDayFinish;
                    flag = false;
                }
                if (visibleDayFinish <= this.VisibleDayStart)
                {
                    dateTime = time2;
                    flag = false;
                }
            }
            while (!flag);
            if (dateTime < this.TimelinePageStart)
            {
                dateTime = this.TimelinePageStart;
            }
            if (this.IsScheduleCachingEnabled)
            {
                this.getPreviousVisibleWorkingTimeCache.Add(key, dateTime);
            }
            return dateTime;
        }

        public DateTime GetPreviousWorkingTime(DateTime dateTime)
        {
            bool flag;
            DateTime key = dateTime;
            if (this.IsScheduleCachingEnabled && this.getPreviousWorkingTimeCache.ContainsKey(key))
            {
                return this.getPreviousWorkingTimeCache[key];
            }
            do
            {
                flag = true;
                if (this.NonworkingIntervals != null)
                {
                    foreach (TimeInterval interval in this.NonworkingIntervals)
                    {
                        if ((dateTime > interval.Start) && (dateTime <= interval.Finish))
                        {
                            dateTime = interval.Start;
                            flag = false;
                        }
                    }
                }
                if (dateTime.Date == DateTime.MinValue)
                {
                    return DateTime.MinValue;
                }
                DateTime time2 = (dateTime.TimeOfDay > TimeSpan.Zero) ? dateTime.Date : dateTime.Date.AddDays(-1.0);
                TimeOfDay maxValue = (dateTime.TimeOfDay > TimeSpan.Zero) ? (TimeOfDay)dateTime.TimeOfDay : TimeOfDay.MaxValue;
                DayOfWeek dayOfWeek = time2.DayOfWeek;
                while ((dayOfWeek > this.WorkingWeekFinish) || (dayOfWeek < this.WorkingWeekStart))
                {
                    dateTime = time2;
                    time2 = time2.AddDays(-1.0);
                    maxValue = TimeOfDay.MaxValue;
                    dayOfWeek = time2.DayOfWeek;
                    flag = false;
                }
                if (maxValue > this.WorkingDayFinish)
                {
                    dateTime = time2.Add((TimeSpan)this.WorkingDayFinish);
                    maxValue = this.WorkingDayFinish;
                    flag = false;
                }
                if (maxValue <= this.WorkingDayStart)
                {
                    dateTime = time2;
                    flag = false;
                }
            }
            while (!flag);
            if (this.IsScheduleCachingEnabled)
            {
                this.getPreviousWorkingTimeCache.Add(key, dateTime);
            }
            return dateTime;
        }

        public static ScaleCollection GetScales(DependencyObject d)
        {
            return (ScaleCollection)d.GetValue(ScalesProperty);
        }

        public static Brush GetStandardBarFill(DependencyObject d)
        {
            return (Brush)d.GetValue(StandardBarFillProperty);
        }

        public static Brush GetStandardBarStroke(DependencyObject d)
        {
            return (Brush)d.GetValue(StandardBarStrokeProperty);
        }

        public static Brush GetStandardCompletedBarFill(DependencyObject d)
        {
            return (Brush)d.GetValue(StandardCompletedBarFillProperty);
        }

        public static Brush GetStandardCompletedBarStroke(DependencyObject d)
        {
            return (Brush)d.GetValue(StandardCompletedBarStrokeProperty);
        }

        public DateTime GetStart(TimeSpan effort, DateTime finish)
        {
            finish = this.GetPreviousWorkingTime(finish);
            DateTime dateTime = finish;
            while (effort > TimeSpan.Zero)
            {
                dateTime = this.GetPreviousNonworkingTime(finish);
                if ((finish - dateTime) > effort)
                {
                    dateTime = finish.Subtract(effort);
                }
                effort -= finish - dateTime;
                finish = this.GetNextWorkingTime(dateTime);
            }
            return dateTime;
        }

        public IEnumerable<PredecessorItem> GetSuccessorPredecessorItems(GanttChartItem item)
        {
            if (this.managedItems == null)
            {
                return null;
            }
            return this.managedItems.GetSuccessorPredecessorItems(item);
        }

        public IEnumerable<GanttChartItem> GetSuccessors(GanttChartItem item)
        {
            if (this.managedItems == null)
            {
                return null;
            }
            return this.managedItems.GetSuccessors(item);
        }

        public static Brush GetSummaryBarFill(DependencyObject d)
        {
            return (Brush)d.GetValue(SummaryBarFillProperty);
        }

        public static Brush GetSummaryBarStroke(DependencyObject d)
        {
            return (Brush)d.GetValue(SummaryBarStrokeProperty);
        }

        public DateTime GetUpdateScaleTime(DateTime dateTime)
        {
            if (this.UpdateScaleInterval <= TimeSpan.Zero)
            {
                return dateTime;
            }
            TimeSpan span = (TimeSpan)(dateTime - this.TimelinePageStart);
            double num = Math.IEEERemainder(span.TotalHours, this.UpdateScaleInterval.TotalHours);
            return dateTime.AddHours(-num);
        }

        private DateTime GetVisibleWeekStart(DateTime dateTime, out TimeSpan difference)
        {
            TimeSpan timeOfDay = dateTime.TimeOfDay;
            if (((dateTime.DayOfWeek >= this.VisibleWeekStart) && (dateTime.DayOfWeek <= this.VisibleWeekFinish)) && (timeOfDay >= this.VisibleDayStart))
            {
                if (timeOfDay <= this.VisibleDayFinish)
                {
                    difference = timeOfDay - this.VisibleDayStart;
                }
                else
                {
                    difference = (TimeSpan)(this.VisibleDayFinish - this.VisibleDayStart);
                }
            }
            else
            {
                difference = TimeSpan.Zero;
            }
            do
            {
                if (dateTime.Date == DateTime.MinValue)
                {
                    return DateTime.MinValue;
                }
                dateTime = dateTime.Date.AddDays(-1.0);
                if ((dateTime.DayOfWeek >= this.VisibleWeekStart) && (dateTime.DayOfWeek <= this.VisibleWeekFinish))
                {
                    difference += this.VisibleDayFinish - this.VisibleDayStart;
                }
            }
            while (dateTime.DayOfWeek != this.VisibleWeekStart);
            return dateTime;
        }

        public IEnumerable<TimeInterval> GetWorkingTimeIntervals(DateTime start, DateTime finish)
        {
            start = this.GetNextWorkingTime(start);
            while (start < finish)
            {
                var dateTime = this.GetNextNonworkingTime(start);
                if (dateTime > finish)
                    dateTime = finish;
                yield return new TimeInterval(start, dateTime);
            }
        }

        private void HorizontalScrollBar_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            if ((this.scrollViewer != null) && (this.headerScrollViewer != null))
            {
                this.headerScrollViewer.ScrollToHorizontalOffset(this.scrollViewer.HorizontalOffset);
            }
            base.Dispatcher.BeginInvoke((Action)(() =>
            {
                this.UpdateComputedUpdateTimelinePageButtonsVisibility();
            }));
            this.UpdateDisplayedTimeFromScroll();
        }

        public void IncreaseTimelinePage()
        {
            DateTime timelinePageStart = this.TimelinePageStart;
            DateTime timelinePageFinish = this.TimelinePageFinish;
            timelinePageStart += this.UpdateTimelinePageAmount;
            timelinePageFinish += this.UpdateTimelinePageAmount;
            this.SetTimelinePage(timelinePageStart, timelinePageFinish);
        }

        private void IncreaseTimelinePageButton_Click(object sender, RoutedEventArgs e)
        {
            if (this.IncreaseTimelinePageProvider != null)
            {
                this.IncreaseTimelinePageProvider(this, EventArgs.Empty);
            }
            else
            {
                this.IncreaseTimelinePage();
            }
        }

        public int IndexOf(GanttChartItem item)
        {
            if (this.managedItems == null)
            {
                return -1;
            }
            return this.managedItems.IndexOf(item);
        }

        private void InitializeScheduleCaches()
        {
            this.getNextWorkingTimeCache = new Dictionary<DateTime, DateTime>();
            this.getPreviousWorkingTimeCache = new Dictionary<DateTime, DateTime>();
            this.getNextVisibleTimeCache = new Dictionary<DateTime, DateTime>();
            this.getPreviousVisibleTimeCache = new Dictionary<DateTime, DateTime>();
            this.getNextVisibleWorkingTimeCache = new Dictionary<DateTime, DateTime>();
            this.getPreviousVisibleWorkingTimeCache = new Dictionary<DateTime, DateTime>();
            this.getNextNonworkingTimeCache = new Dictionary<DateTime, DateTime>();
            this.getPreviousNonworkingTimeCache = new Dictionary<DateTime, DateTime>();
            this.getNextVisibleNonworkingTimeCache = new Dictionary<DateTime, DateTime>();
            this.getPreviousVisibleNonworkingTimeCache = new Dictionary<DateTime, DateTime>();
            this.getPositionCache = new Dictionary<DateTime, double>();
        }

        private void Item_ActualDisplayRowIndexChanged(object sender, EventArgs e)
        {
            this.UpdateActualDisplayRowCount();
            this.UpdateComputedHeight();
            this.UpdateVirtualizationVisibility();
        }

        private void Item_ExpansionChanged(object sender, EventArgs e)
        {
            this.UpdateActualDisplayRowCount();
            this.UpdateComputedHeight();
            this.UpdateVirtualizationVisibility();
        }

        private void Items_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnItemCollectionChanged(sender, e);
        }

        private void Items_ItemPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            this.OnItemPropertyChanged(sender, e);
        }

        private void ManagedItems_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    this.AddManagedItems(e.NewItems);
                    return;

                case NotifyCollectionChangedAction.Remove:
                    this.RemoveManagedItems(e.OldItems);
                    return;

                case NotifyCollectionChangedAction.Replace:
                case NotifyCollectionChangedAction.Reset:
                    this.ClearManagedItems();
                    this.AddManagedItems(this.managedItems);
                    break;

                case NotifyCollectionChangedAction.Move:
                    break;

                default:
                    return;
            }
        }

        private void NonworkingIntervals_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.UpdateNonworkingIntervals();
        }

        private static void OnActualChartHeightChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.ActualChartHeight = Math.Max(view.ActualChartViewportHeight, view.ActualChartExtentHeight);
            }
        }

        protected virtual void OnActualDisplayRowCountChanged()
        {
            if (this.ActualDisplayRowCountChanged != null)
            {
                this.ActualDisplayRowCountChanged(this, EventArgs.Empty);
            }
        }

        private static void OnActualDisplayRowCountChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.OnActualDisplayRowCountChanged();
            }
        }

        public override void OnApplyTemplate()
        {
            base.OnApplyTemplate();
            if (!this.isTemplateApplied)
            {
                LicenseValidator.Validate(this, typeof(GanttChartView), Assembly.GetCallingAssembly());
            }
            if (this.NonworkingIntervals == null)
            {
                this.NonworkingIntervals = new ObservableCollection<TimeInterval>();
            }
            if (this.Scales == null)
            {
                this.Scales = new ScaleCollection();
            }
            this.scrollViewer = base.GetTemplateChild("ScrollViewer") as System.Windows.Controls.ScrollViewer;
            if (this.scrollViewer != null)
            {
                base.SetBinding(ActualChartViewportHeightProperty, new Binding("ViewportHeight") { Source = this.scrollViewer });
                base.SetBinding(ActualChartExtentHeightProperty, new Binding("ExtentHeight") { Source = this.scrollViewer });
                this.scrollViewer.ApplyTemplate();
                this.scrollViewer.ScrollChanged += new ScrollChangedEventHandler(this.ScrollViewer_ScrollChanged);
                this.scrollViewerRoot = (VisualTreeHelper.GetChildrenCount(this.scrollViewer) == 1) ? (VisualTreeHelper.GetChild(this.scrollViewer, 0) as FrameworkElement) : null;
                if (this.scrollViewerRoot != null)
                {
                    this.headerScrollViewer = this.scrollViewerRoot.FindName("HeaderScrollViewer") as System.Windows.Controls.ScrollViewer;
                    this.horizontalScrollBar = this.scrollViewerRoot.FindName("HorizontalScrollBar") as ScrollBar;
                    if (this.horizontalScrollBar == null)
                    {
                        this.horizontalScrollBar = this.scrollViewerRoot.FindName("PART_HorizontalScrollBar") as ScrollBar;
                    }
                    if (this.horizontalScrollBar != null)
                    {
                        this.horizontalScrollBar.ValueChanged += new RoutedPropertyChangedEventHandler<double>(this.HorizontalScrollBar_ValueChanged);
                    }
                    Button button = this.scrollViewerRoot.FindName("IncreaseTimelinePageButton") as Button;
                    if (button != null)
                    {
                        button.Click += new RoutedEventHandler(this.IncreaseTimelinePageButton_Click);
                    }
                    Button button2 = this.scrollViewerRoot.FindName("DecreaseTimelinePageButton") as Button;
                    if (button2 != null)
                    {
                        button2.Click += new RoutedEventHandler(this.DecreaseTimelinePageButton_Click);
                    }
                    this.verticalScrollBar = this.scrollViewerRoot.FindName("VerticalScrollBar") as ScrollBar;
                    if (this.verticalScrollBar == null)
                    {
                        this.verticalScrollBar = this.scrollViewerRoot.FindName("PART_VerticalScrollBar") as ScrollBar;
                    }
                    if (this.verticalScrollBar != null)
                    {
                        this.verticalScrollBar.ValueChanged += new RoutedPropertyChangedEventHandler<double>(this.VerticalScrollBar_ValueChanged);
                    }
                    this.scrollContentPresenter = this.scrollViewerRoot.FindName("PART_ScrollContentPresenter") as System.Windows.Controls.ScrollContentPresenter;
                    if (this.scrollContentPresenter != null)
                    {
                        this.scrollContentPresenter.SizeChanged += new SizeChangedEventHandler(this.ScrollContentPresenter_SizeChanged);
                    }
                }
            }
            bool isTemplateApplied = this.isTemplateApplied;
            this.isTemplateApplied = true;
            if (!isTemplateApplied)
            {
                this.UpdateItemsSource();
                this.UpdateManagedItems();
                base.PreviewMouseDoubleClick += new MouseButtonEventHandler(this.GanttChartView_MouseButtonClick);
            }
            this.UpdateComputedWidth();
            this.UpdateScales();
            this.UpdateScrollFromDisplayedTime();
        }

        private static void OnAreUpdateTimelinePageButtonsVisibleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.UpdateComputedUpdateTimelinePageButtonsVisibility();
            }
        }

        private static void OnDependencyCreationValidatorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.UpdateDependencyCreationThumbVisibility();
            }
        }

        private static void OnDependencyDeletionValidatorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.DependencyDeletionPopupVisibility = (view.DependencyDeletionValidator != null) ? Visibility.Visible : Visibility.Collapsed;
            }
        }

        protected virtual void OnDisplayedTimeChanged()
        {
            if (this.DisplayedTimeChanged != null)
            {
                this.DisplayedTimeChanged(this, EventArgs.Empty);
            }
        }

        private static void OnDisplayedTimeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.OnDisplayedTimeChanged();
                view.UpdateScrollFromDisplayedTime();
            }
        }

        private static void OnDisplayRowCountChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.UpdateActualDisplayRowCount();
                view.UpdateComputedHeight();
                view.UpdateVirtualizationVisibility();
                view.UpdateDependencyCreationThumbVisibility();
            }
        }

        private static void OnHourWidthChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.ClearScheduleCacheValues();
                view.UpdateComputedWidth();
                view.UpdateScales();
                view.UpdateBars();
                view.UpdateDisplayedTimeFromScroll();
            }
        }

        private static void OnIsAsyncPresentationEnabledChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.UpdateItemsSource();
            }
        }

        private static void OnIsCurrentTimeLineVisibleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.UpdateScales();
            }
        }

        private static void OnIsDependencyToolTipVisibleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.DependencyToolTipVisibility = view.IsDependencyToolTipVisible ? Visibility.Visible : Visibility.Collapsed;
            }
        }

        private static void OnIsNonworkingTimeHighlightedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.UpdateScales();
            }
        }

        private static void OnIsReadOnlyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.ThumbVisibility = !view.IsReadOnly ? Visibility.Visible : Visibility.Collapsed;
            }
        }

        private static void OnIsTaskCompletedEffortVisibleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.TaskCompletedEffortVisibility = view.IsTaskCompletedEffortVisible ? Visibility.Visible : Visibility.Collapsed;
            }
        }

        private static void OnIsTaskToolTipVisibleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.TaskToolTipVisibility = view.IsTaskToolTipVisible ? Visibility.Visible : Visibility.Collapsed;
            }
        }

        private static void OnIsVirtualizingChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if ((view != null) && !view.IsVirtualizing)
            {
                view.UpdateVirtualizationVisibility();
            }
        }

        protected virtual void OnItemActivated(GanttChartItem item)
        {
            if (this.ItemActivated != null)
            {
                this.ItemActivated(this, new ItemActivatedEventArgs(item));
            }
        }

        protected virtual void OnItemCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (this.ItemCollectionChanged != null)
            {
                this.ItemCollectionChanged(sender, e);
            }
        }

        private static void OnItemHeightChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.UpdateComputedHeight();
                view.UpdateComputedItemTops();
                view.UpdateVirtualizationVisibility();
            }
        }

        protected virtual void OnItemPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (this.ItemPropertyChanged != null)
            {
                this.ItemPropertyChanged(sender, e);
            }
        }

        protected override void OnItemsChanged(NotifyCollectionChangedEventArgs e)
        {
            base.OnItemsChanged(e);
            if (this.isTemplateApplied && (e.Action == NotifyCollectionChangedAction.Reset))
            {
                this.UpdateManagedItems();
            }
        }

        private static void OnItemsChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if ((view != null) && view.isTemplateApplied)
            {
                view.UpdateItemsSource();
            }
        }

        private void OnNonworkingIntervalsChanged()
        {
            if (this.managedNonworkingIntervals != null)
            {
                this.managedNonworkingIntervals.CollectionChanged -= new NotifyCollectionChangedEventHandler(this.NonworkingIntervals_CollectionChanged);
            }
            this.managedNonworkingIntervals = this.NonworkingIntervals;
            if (this.managedNonworkingIntervals != null)
            {
                this.managedNonworkingIntervals.CollectionChanged += new NotifyCollectionChangedEventHandler(this.NonworkingIntervals_CollectionChanged);
            }
            this.UpdateNonworkingIntervals();
        }

        private static void OnNonworkingIntervalsChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.OnNonworkingIntervalsChanged();
            }
        }

        private void OnScalesChanged()
        {
            if (this.managedScales != null)
            {
                //this.managedScales.CollectionChanged -= new NotifyCollectionChangedEventHandler(this.Scales_CollectionChanged);
            }
            this.managedScales = this.Scales;
            if (this.managedScales != null)
            {
                this.SetManagedScales(this.managedScales);
                //this.managedScales.CollectionChanged += new NotifyCollectionChangedEventHandler(this.Scales_CollectionChanged);
            }
            this.UpdateScales(false);
        }

        private static void OnScalesChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.OnScalesChanged();
            }
        }

        protected virtual void OnTimelinePageChanged()
        {
            if (this.TimelinePageChanged != null)
            {
                this.TimelinePageChanged(this, EventArgs.Empty);
            }
        }

        private static void OnTimelinePageFinishChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.ClearScheduleCacheValues();
                view.CoerceTimelinePage();
                view.UpdateComputedWidth();
                view.UpdateScales();
                view.UpdateBars();
                view.UpdateDisplayedTimeFromScroll();
                view.OnTimelinePageChanged();
            }
        }

        private static void OnTimelinePageStartChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.ClearScheduleCacheValues();
                view.CoerceTimelinePage();
                view.UpdateComputedWidth();
                view.UpdateScales();
                view.UpdateBars();
                view.UpdateDisplayedTimeFromScroll();
                view.OnTimelinePageChanged();
            }
        }

        private static void OnVisibleDayFinishChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.ClearScheduleCacheValues();
                view.CoerceVisibleDay();
                view.UpdateComputedWidth();
                view.UpdateScales();
                view.UpdateBars();
                view.UpdateDisplayedTimeFromScroll();
            }
        }

        private static void OnVisibleDayStartChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.ClearScheduleCacheValues();
                view.CoerceVisibleDay();
                view.UpdateComputedWidth();
                view.UpdateScales();
                view.UpdateBars();
                view.UpdateDisplayedTimeFromScroll();
            }
        }

        private static void OnVisibleWeekFinishChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.ClearScheduleCacheValues();
                view.CoerceVisibleWeek();
                view.UpdateComputedWidth();
                view.UpdateScales();
                view.UpdateBars();
                view.UpdateDisplayedTimeFromScroll();
            }
        }

        private static void OnVisibleWeekStartChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.ClearScheduleCacheValues();
                view.CoerceVisibleWeek();
                view.UpdateComputedWidth();
                view.UpdateScales();
                view.UpdateBars();
                view.UpdateDisplayedTimeFromScroll();
            }
        }

        private static void OnWorkingDayFinishChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.ClearScheduleCacheValues();
                view.CoerceWorkingDay();
                view.UpdateScales();
            }
        }

        private static void OnWorkingDayStartChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.ClearScheduleCacheValues();
                view.CoerceWorkingDay();
                view.UpdateScales();
            }
        }

        private static void OnWorkingWeekFinishChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.ClearScheduleCacheValues();
                view.CoerceWorkingWeek();
                view.UpdateScales();
            }
        }

        private static void OnWorkingWeekStartChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            GanttChartView view = d as GanttChartView;
            if (view != null)
            {
                view.ClearScheduleCacheValues();
                view.CoerceWorkingWeek();
                view.UpdateScales();
            }
        }

        private void OriginalItems_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (GanttChartItem item in e.NewItems)
                    {
                        this.AttachItem(item);
                    }
                    if (this.IsAsyncPresentationEnabled)
                    {
                        if (e.NewStartingIndex < this.asyncItemCount)
                        {
                            for (int j = 0; j < e.NewItems.Count; j++)
                            {
                                this.items.Insert(e.NewStartingIndex + j, e.NewItems[j] as GanttChartItem);
                            }
                            this.asyncItemCount += e.NewItems.Count;
                            return;
                        }
                        if (this.asyncTimer == null)
                        {
                            break;
                        }
                        this.asyncTimer.Start();
                        return;
                    }
                    for (int i = 0; i < e.NewItems.Count; i++)
                    {
                        this.items.Insert(e.NewStartingIndex + i, e.NewItems[i] as GanttChartItem);
                    }
                    return;

                case NotifyCollectionChangedAction.Remove:
                    {
                        if (this.IsAsyncPresentationEnabled)
                        {
                            if (e.OldStartingIndex < this.asyncItemCount)
                            {
                                int num4 = Math.Min(e.OldItems.Count, this.items.Count - e.OldStartingIndex);
                                int num5 = num4;
                                while (num5-- > 0)
                                {
                                    this.items.RemoveAt(e.OldStartingIndex + num5);
                                }
                                this.asyncItemCount -= num4;
                                return;
                            }
                            break;
                        }
                        int count = e.OldItems.Count;
                        while (count-- > 0)
                        {
                            this.items.RemoveAt(e.OldStartingIndex + count);
                        }
                        return;
                    }
                case NotifyCollectionChangedAction.Replace:
                case NotifyCollectionChangedAction.Reset:
                    this.UpdateItemsSource();
                    break;

                case NotifyCollectionChangedAction.Move:
                    break;

                default:
                    return;
            }
        }

        public void PauseAsyncPresentation()
        {
            if ((this.asyncTimer != null) && this.asyncTimer.IsEnabled)
            {
                this.asyncTimer.Stop();
                this.isAsyncTimerPaused = true;
            }
        }

        protected override void PrepareContainerForItemOverride(DependencyObject element, object item)
        {
            base.PrepareContainerForItemOverride(element, item);
            BindingOperations.SetBinding(element, Canvas.TopProperty, new Binding("ComputedItemTop") { Source = item });
            BindingOperations.SetBinding(element, Canvas.LeftProperty, new Binding("ComputedBarLeft") { Source = item });
        }

        private void PrepareExport()
        {
            if (this.IsVirtualizing && (this.ManagedItems != null))
            {
                foreach (GanttChartItem item in this.ManagedItems)
                {
                    if (item.IsVisible && !item.IsVirtuallyVisible)
                    {
                        item.IsVirtuallyVisible = true;
                    }
                }
            }
        }

        public void Print()
        {
            this.Print(string.Format("{0} Document", base.GetType()));
        }

        public void Print(string documentName)
        {
            this.PrepareExport();
            PrintDialog dialog = new PrintDialog();
            if (dialog.ShowDialog() == true)
            {
                DocumentPaginator documentPaginator = new DocumentPaginator(this)
                {
                    PageSize = new Size(dialog.PrintableAreaWidth, dialog.PrintableAreaHeight)
                };
                dialog.PrintDocument(documentPaginator, documentName);
            }
        }

        private void RemoveManagedItems(IList items)
        {
            foreach (GanttChartItem item in items)
            {
                item.ActualDisplayRowIndexChanged -= new EventHandler(this.Item_ActualDisplayRowIndexChanged);
                item.ExpansionChanged -= new EventHandler(this.Item_ExpansionChanged);
            }
            base.Dispatcher.BeginInvoke((Action)(() =>
            {
                this.UpdateActualDisplayRowCount();
                this.UpdateComputedHeight();
                this.UpdateVirtualizationVisibility();
            }));
        }

        private void Scales_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    this.SetManagedScales(e.NewItems);
                    break;

                case NotifyCollectionChangedAction.Replace:
                case NotifyCollectionChangedAction.Reset:
                    this.SetManagedScales(this.managedScales);
                    break;
            }
            this.UpdateScales(false);
        }

        private void ScrollContentPresenter_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            base.Dispatcher.BeginInvoke((Action)(() =>
            {
                this.UpdateVirtualizationVisibility();
            }));
        }

        public void ScrollTo(GanttChartItem item)
        {
            if (this.ParentDataGrid != null)
                this.ParentDataGrid.ScrollTo(item);
            else
                base.Dispatcher.BeginInvoke((Action)(() =>
                {
                    if (this.scrollViewer != null)
                    {
                        var top = this.GetItemTop(item);
                        if (!double.IsNaN(top))
                            this.scrollViewer.ScrollToVerticalOffset(top);
                    }
                }));
        }

        public void ScrollTo(DateTime dateTime)
        {
            this.DisplayedTime = dateTime;
        }

        public void ScrollTo(int index)
        {
            if (this.ParentDataGrid != null)
                this.ParentDataGrid.ScrollTo(index);
            else
                base.Dispatcher.BeginInvoke((Action)(() =>
                {
                    if (this.scrollViewer != null)
                    {
                        var top = this.GetItemTop(index);
                        if (!double.IsNaN(top))
                            this.scrollViewer.BringIntoView(new Rect(this.scrollViewer.HorizontalOffset, top, 1, this.ItemHeight));
                    }
                }));
        }

        public GanttChartDataGrid ParentDataGrid { get; set; }

        private void ScrollViewer_ScrollChanged(object sender, ScrollChangedEventArgs e)
        {
            if (ParentDataGrid != null)
                return;

            if (this.isDuringInternalScrollUpdate)
                this.isDuringInternalScrollUpdate = false;
            else if ((this.scrollViewer == null) || !System.Windows.Controls.ScrollViewer.GetCanContentScroll(this.scrollViewer))
            {
                if (e.ViewportHeightChange != 0.0)
                {
                    this.UpdateComputedHeight();
                }
                if (((this.scrollViewer != null) && (e.VerticalChange != 0.0)) && !double.IsNaN(this.ItemHeight))
                {
                    double verticalOffset = 0;

                    if (e.VerticalChange < 0)
                    {
                        verticalOffset = -(this.scrollViewer.VerticalOffset % this.ItemHeight);
                    }
                    else if (e.VerticalChange > 0)
                    {
                        verticalOffset = (this.scrollViewer.VerticalOffset + this.scrollViewer.ViewportHeight) % this.ItemHeight;
                        if (verticalOffset > 0)
                            verticalOffset = this.ItemHeight - verticalOffset;
                    }

                    if (verticalOffset != 0)
                    {
                        this.isDuringInternalScrollUpdate = true;
                        this.scrollViewer.ScrollToVerticalOffset(this.scrollViewer.VerticalOffset + verticalOffset);
                    }
                }
            }
        }

        public static void SetComputedDecreaseTimelinePageButtonVisibility(DependencyObject d, Visibility value)
        {
            d.SetValue(ComputedDecreaseTimelinePageButtonVisibilityProperty, value);
        }

        public static void SetComputedIncreaseTimelinePageButtonVisibility(DependencyObject d, Visibility value)
        {
            d.SetValue(ComputedIncreaseTimelinePageButtonVisibilityProperty, value);
        }

        public static void SetComputedWidth(DependencyObject d, double value)
        {
            d.SetValue(ComputedWidthProperty, value);
        }

        public static void SetDependencyLineStroke(DependencyObject d, Brush value)
        {
            d.SetValue(DependencyLineStrokeProperty, value);
        }

        public static void SetHeaderBackground(DependencyObject d, Brush value)
        {
            d.SetValue(HeaderBackgroundProperty, value);
        }

        public static void SetHeaderHeight(DependencyObject d, double value)
        {
            d.SetValue(HeaderHeightProperty, value);
        }

        private void SetManagedScales(IList scales)
        {
            foreach (DlhSoft.Windows.Controls.Scale scale in scales)
            {
                scale.GanttChartView = this;
            }
        }

        public static void SetMilestoneBarFill(DependencyObject d, Brush value)
        {
            d.SetValue(MilestoneBarFillProperty, value);
        }

        public static void SetMilestoneBarStroke(DependencyObject d, Brush value)
        {
            d.SetValue(MilestoneBarStrokeProperty, value);
        }

        public static void SetScales(DependencyObject d, ObservableCollection<DlhSoft.Windows.Controls.Scale> value)
        {
            d.SetValue(ScalesProperty, value);
        }

        public static void SetStandardBarFill(DependencyObject d, Brush value)
        {
            d.SetValue(StandardBarFillProperty, value);
        }

        public static void SetStandardBarStroke(DependencyObject d, Brush value)
        {
            d.SetValue(StandardBarStrokeProperty, value);
        }

        public static void SetStandardCompletedBarFill(DependencyObject d, Brush value)
        {
            d.SetValue(StandardCompletedBarFillProperty, value);
        }

        public static void SetStandardCompletedBarStroke(DependencyObject d, Brush value)
        {
            d.SetValue(StandardCompletedBarStrokeProperty, value);
        }

        public static void SetSummaryBarFill(DependencyObject d, Brush value)
        {
            d.SetValue(SummaryBarFillProperty, value);
        }

        public static void SetSummaryBarStroke(DependencyObject d, Brush value)
        {
            d.SetValue(SummaryBarStrokeProperty, value);
        }

        public void SetTimelinePage(DateTime start, DateTime finish)
        {
            this.TimelinePageStart = start;
            this.TimelinePageFinish = finish;
        }

        internal void UpdateActualDisplayRowCount()
        {
            if (this.DisplayRowCount.HasValue)
            {
                this.ActualDisplayRowCount = this.DisplayRowCount.Value;
            }
            else if (this.managedItems != null)
            {
                IEnumerable<GanttChartItem> source = from i in this.managedItems
                                                     where i.IsVisible
                                                     select i;
                if (!source.Any<GanttChartItem>())
                {
                    this.ActualDisplayRowCount = 0;
                }
                else
                {
                    this.ActualDisplayRowCount = source.Max<GanttChartItem>(((Func<GanttChartItem, int>)(i => i.ActualDisplayRowIndex))) + 1;
                }
            }
        }

        internal protected void UpdateBars()
        {
            if (this.isTemplateApplied && (this.managedItems != null))
            {
                foreach (GanttChartItem item in this.managedItems)
                {
                    item.UpdateBar();
                    item.UpdateDependencyLines();
                }
            }
        }

        internal void UpdateComputedHeight()
        {
            if ((this.managedItems != null) && !double.IsNaN(this.ItemHeight))
            {
                double num = 0.0;
                num = ((this.scrollViewer != null) && !System.Windows.Controls.ScrollViewer.GetCanContentScroll(this.scrollViewer)) ? Math.IEEERemainder(this.scrollViewer.ViewportHeight, this.ItemHeight) : 0.0;
                while (num < 0.0)
                {
                    num = this.ItemHeight + num;
                }
                this.ComputedHeight = (this.ActualDisplayRowCount * this.ItemHeight) + num;
            }
        }

        internal void UpdateComputedItemTops()
        {
            if (this.isTemplateApplied && (this.managedItems != null))
            {
                foreach (GanttChartItem item in this.managedItems)
                {
                    item.UpdateComputedItemTop();
                }
            }
        }

        internal void UpdateComputedUpdateTimelinePageButtonsVisibility()
        {
            bool flag = this.AreUpdateTimelinePageButtonsVisible && (this.scrollViewer != null);
            this.ComputedIncreaseTimelinePageButtonVisibility = (flag && (this.scrollViewer.HorizontalOffset >= this.scrollViewer.ScrollableWidth)) ? Visibility.Visible : Visibility.Collapsed;
            this.ComputedDecreaseTimelinePageButtonVisibility = (flag && (this.scrollViewer.HorizontalOffset <= 0.0)) ? Visibility.Visible : Visibility.Collapsed;
        }

        internal protected void UpdateComputedWidth()
        {
            this.ComputedWidth = this.GetPosition(this.TimelinePageFinish);
        }

        internal void UpdateDependencyCreationThumbVisibility()
        {
            this.DependencyCreationThumbVisibility = ((this.DependencyCreationValidator != null) && !this.DisplayRowCount.HasValue) ? Visibility.Visible : Visibility.Collapsed;
        }

        // Modif tekigo
        //internal void UpdateDisplayedTimeFromScroll()
        internal protected virtual void UpdateDisplayedTimeFromScroll()
        {
            if (this.scrollViewer != null)
            {
                this.isDuringUpdateDisplayedTimeFromScroll = true;
                this.DisplayedTime = this.GetDateTime(this.scrollViewer.HorizontalOffset);
                this.isDuringUpdateDisplayedTimeFromScroll = false;
            }
        }

        protected virtual void UpdateItemsSource()
        {
            if (this.isTemplateApplied)
            {
                if (this.items != null)
                {
                    this.items.ItemPropertyChanged -= new PropertyChangedEventHandler(this.Items_ItemPropertyChanged);
                    this.items.CollectionChanged -= new NotifyCollectionChangedEventHandler(this.Items_CollectionChanged);
                }
                if (this.originalItems != null)
                {
                    this.originalItems.CollectionChanged -= new NotifyCollectionChangedEventHandler(this.OriginalItems_CollectionChanged);
                }
                if (this.asyncTimer != null)
                {
                    this.asyncTimer.Stop();
                    this.asyncTimer.Tick -= new EventHandler(this.AsyncTimer_Tick);
                    this.asyncTimer = null;
                }
                this.originalItems = this.Items;
                if (this.originalItems == null)
                {
                    base.ItemsSource = null;
                }
                else
                {
                    foreach (GanttChartItem item in this.originalItems)
                    {
                        this.AttachItem(item);
                    }
                    this.items = new GanttChartItemCollection();
                    if (!this.IsAsyncPresentationEnabled)
                    {
                        this.asyncItemCount = -1;
                        foreach (GanttChartItem item2 in this.originalItems)
                        {
                            this.items.Add(item2);
                        }
                    }
                    else
                    {
                        this.asyncItemCount = Math.Min(this.originalItems.Count, this.IsAsyncPresentationEnabledMinCount);
                        for (int i = 0; i < this.asyncItemCount; i++)
                        {
                            this.items.Add(this.originalItems[i]);
                        }
                        if (this.asyncTimer == null)
                        {
                            this.asyncTimer = new DispatcherTimer();
                            this.asyncTimer.Tick += new EventHandler(this.AsyncTimer_Tick);
                        }
                        this.asyncTimer.Start();
                    }
                    this.originalItems.CollectionChanged += new NotifyCollectionChangedEventHandler(this.OriginalItems_CollectionChanged);
                    this.internalUpdateItemsSourceCount++;
                    base.Dispatcher.BeginInvoke((Action)(() =>
                    {
                        if (--this.internalUpdateItemsSourceCount <= 0)
                        {
                            this.items.CollectionChanged += new NotifyCollectionChangedEventHandler(this.Items_CollectionChanged);
                            this.items.ItemPropertyChanged += new PropertyChangedEventHandler(this.Items_ItemPropertyChanged);
                        }
                    }));
                    for (int i = 0; i < this.items.Count; i++)
                    {
                        this.items.UpdateVisibilityFromExpansion(i);
                    }
                    base.ItemsSource = this.items;
                }
            }
        }

        internal void UpdateManagedItems()
        {
            if (this.managedItems != null)
            {
                this.managedItems.CollectionChanged -= new NotifyCollectionChangedEventHandler(this.ManagedItems_CollectionChanged);
                this.ClearManagedItems();
            }
            this.managedItems = base.ItemsSource as GanttChartItemCollection;
            if (this.managedItems != null)
            {
                this.AddManagedItems(this.managedItems);
                this.managedItems.CollectionChanged += new NotifyCollectionChangedEventHandler(this.ManagedItems_CollectionChanged);
            }
            this.UpdateComputedHeight();
            this.UpdateComputedItemTops();
            this.UpdateBars();
            this.UpdateVirtualizationVisibility();
        }

        internal void UpdateNonworkingIntervals()
        {
            this.ClearScheduleCacheValues();
            this.UpdateScales();
        }

        internal protected void UpdateScales()
        {
            this.UpdateScales(true);
        }

        internal void UpdateScales(bool autoGenerate)
        {
            if (this.isTemplateApplied && (this.Scales != null))
            {
                if (autoGenerate)
                {
                    foreach (DlhSoft.Windows.Controls.Scale scale in this.autoGeneratedScales)
                    {
                        this.Scales.Remove(scale);
                    }
                    this.autoGeneratedScales.Clear();
                    if (this.IsNonworkingTimeHighlighted && !this.Scales.Any<DlhSoft.Windows.Controls.Scale>(s => (s.ScaleType == ScaleType.NonworkingTime)))
                    {
                        DlhSoft.Windows.Controls.Scale target = new DlhSoft.Windows.Controls.Scale
                        {
                            ScaleType = ScaleType.NonworkingTime
                        };
                        BindingOperations.SetBinding(target, DlhSoft.Windows.Controls.Scale.BackgroundProperty, new Binding("NonworkingTimeBackground") { Source = this });
                        this.autoGeneratedScales.Add(target);
                        this.Scales.Insert(0, target);
                    }
                    if (this.IsCurrentTimeLineVisible && !this.Scales.Any<DlhSoft.Windows.Controls.Scale>(delegate(DlhSoft.Windows.Controls.Scale s)
                    {
                        if (s.ScaleType != ScaleType.CurrentTime)
                        {
                            return (s.ScaleType == ScaleType.FutureTime);
                        }
                        return true;
                    }))
                    {
                        DlhSoft.Windows.Controls.Scale scale4 = new DlhSoft.Windows.Controls.Scale
                        {
                            ScaleType = ScaleType.CurrentTime,
                            BorderThickness = new Thickness(0.0, 0.0, 1.0, 0.0)
                        };
                        BindingOperations.SetBinding(scale4, DlhSoft.Windows.Controls.Scale.BorderBrushProperty, new Binding("CurrentTimeLineStroke") { Source = this });
                        this.autoGeneratedScales.Add(scale4);
                        this.Scales.Add(scale4);
                    }
                }
                foreach (DlhSoft.Windows.Controls.Scale scale6 in this.Scales)
                {
                    scale6.GanttChartView = this;
                    scale6.UpdateHeaderHeight();
                    scale6.UpdateIntervals();
                }
            }
        }

        internal protected void UpdateScrollFromDisplayedTime()
        {
            if (!this.isDuringUpdateDisplayedTimeFromScroll)
            {
                base.Dispatcher.BeginInvoke((Action)(() =>
                {
                    if (this.scrollViewer != null)
                    {
                        double offset = this.GetPosition(this.DisplayedTime);
                        this.scrollViewer.ScrollToHorizontalOffset(offset);
                    }
                }));
            }
        }

        internal void UpdateVirtualizationVisibility()
        {
            if ((this.isTemplateApplied && (this.scrollViewer != null)) && (this.managedItems != null))
            {
                if (this.IsVirtualizing)
                {
                    double num = this.scrollViewer.VerticalOffset - this.ItemHeight;
                    double num2 = this.scrollViewer.VerticalOffset + this.scrollViewer.ViewportHeight;
                    foreach (GanttChartItem item in this.managedItems)
                    {
                        if (item.IsVisible && !item.IsVirtuallyVisible)
                        {
                            double computedItemTop = item.ComputedItemTop;
                            if (computedItemTop > num)
                            {
                                if (computedItemTop > num2)
                                {
                                    break;
                                }
                                item.IsVirtuallyVisible = true;
                            }
                        }
                    }
                }
                else
                {
                    foreach (GanttChartItem item2 in this.managedItems)
                    {
                        if (!item2.IsVirtuallyVisible)
                        {
                            item2.IsVirtuallyVisible = true;
                        }
                    }
                }
            }
        }

        private void VerticalScrollBar_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            this.UpdateVirtualizationVisibility();
        }

        public double ActualChartExtentHeight
        {
            get
            {
                return (double)base.GetValue(ActualChartExtentHeightProperty);
            }
            set
            {
                base.SetValue(ActualChartExtentHeightProperty, value);
            }
        }

        public double ActualChartHeight
        {
            get
            {
                return (double)base.GetValue(ActualChartHeightProperty);
            }
            set
            {
                base.SetValue(ActualChartHeightProperty, value);
            }
        }

        public double ActualChartViewportHeight
        {
            get
            {
                return (double)base.GetValue(ActualChartViewportHeightProperty);
            }
            set
            {
                base.SetValue(ActualChartViewportHeightProperty, value);
            }
        }

        public int ActualDisplayRowCount
        {
            get
            {
                return (int)base.GetValue(ActualDisplayRowCountProperty);
            }
            set
            {
                base.SetValue(ActualDisplayRowCountProperty, value);
            }
        }

        public bool AreUpdateTimelinePageButtonsVisible
        {
            get
            {
                return (bool)base.GetValue(AreUpdateTimelinePageButtonsVisibleProperty);
            }
            set
            {
                base.SetValue(AreUpdateTimelinePageButtonsVisibleProperty, value);
            }
        }

        public DataTemplate AssignmentsTemplate
        {
            get
            {
                return (DataTemplate)base.GetValue(AssignmentsTemplateProperty);
            }
            set
            {
                base.SetValue(AssignmentsTemplateProperty, value);
            }
        }

        public double BarHeight
        {
            get
            {
                return (double)base.GetValue(BarHeightProperty);
            }
            set
            {
                base.SetValue(BarHeightProperty, value);
            }
        }

        public double CompletedBarHeight
        {
            get
            {
                return (double)base.GetValue(CompletedBarHeightProperty);
            }
            set
            {
                base.SetValue(CompletedBarHeightProperty, value);
            }
        }

        public Visibility ComputedDecreaseTimelinePageButtonVisibility
        {
            get
            {
                return (Visibility)base.GetValue(ComputedDecreaseTimelinePageButtonVisibilityProperty);
            }
            set
            {
                base.SetValue(ComputedDecreaseTimelinePageButtonVisibilityProperty, value);
            }
        }

        public double ComputedHeight
        {
            get
            {
                return (double)base.GetValue(ComputedHeightProperty);
            }
            set
            {
                base.SetValue(ComputedHeightProperty, value);
            }
        }

        public Visibility ComputedIncreaseTimelinePageButtonVisibility
        {
            get
            {
                return (Visibility)base.GetValue(ComputedIncreaseTimelinePageButtonVisibilityProperty);
            }
            set
            {
                base.SetValue(ComputedIncreaseTimelinePageButtonVisibilityProperty, value);
            }
        }

        public double ComputedWidth
        {
            get
            {
                return (double)base.GetValue(ComputedWidthProperty);
            }
            set
            {
                base.SetValue(ComputedWidthProperty, value);
            }
        }

        public FrameworkElement ContentElement
        {
            get
            {
                if (!this.isTemplateApplied)
                {
                    base.ApplyTemplate();
                }
                if (this.scrollViewer == null)
                {
                    return null;
                }
                return (this.scrollViewer.Content as FrameworkElement);
            }
        }

        public Brush CurrentTimeLineStroke
        {
            get
            {
                return (Brush)base.GetValue(CurrentTimeLineStrokeProperty);
            }
            set
            {
                base.SetValue(CurrentTimeLineStrokeProperty, value);
            }
        }

        public static DlhSoft.Windows.Controls.DependencyCreationValidator DefaultDependencyCreationValidator
        {
            get
            {
                return new DlhSoft.Windows.Controls.DependencyCreationValidator(GanttChartView.DefaultDependencyCreationValidatorProvider);
            }
        }

        public static DlhSoft.Windows.Controls.DependencyDeletionValidator DefaultDependencyDeletionValidator
        {
            get
            {
                return new DlhSoft.Windows.Controls.DependencyDeletionValidator(GanttChartView.DefaultDependencyDeletionValidatorProvider);
            }
        }

        public Visibility DependencyCreationThumbVisibility
        {
            get
            {
                return (Visibility)base.GetValue(DependencyCreationThumbVisibilityProperty);
            }
            set
            {
                base.SetValue(DependencyCreationThumbVisibilityProperty, value);
            }
        }

        public DlhSoft.Windows.Controls.DependencyCreationValidator DependencyCreationValidator
        {
            get
            {
                return (DlhSoft.Windows.Controls.DependencyCreationValidator)base.GetValue(DependencyCreationValidatorProperty);
            }
            set
            {
                base.SetValue(DependencyCreationValidatorProperty, value);
            }
        }

        public object DependencyDeletionContextMenuItemHeader
        {
            get
            {
                return base.GetValue(DependencyDeletionContextMenuItemHeaderProperty);
            }
            set
            {
                base.SetValue(DependencyDeletionContextMenuItemHeaderProperty, value);
            }
        }

        public Visibility DependencyDeletionPopupVisibility
        {
            get
            {
                return (Visibility)base.GetValue(DependencyDeletionPopupVisibilityProperty);
            }
            set
            {
                base.SetValue(DependencyDeletionPopupVisibilityProperty, value);
            }
        }

        public DlhSoft.Windows.Controls.DependencyDeletionValidator DependencyDeletionValidator
        {
            get
            {
                return (DlhSoft.Windows.Controls.DependencyDeletionValidator)base.GetValue(DependencyDeletionValidatorProperty);
            }
            set
            {
                base.SetValue(DependencyDeletionValidatorProperty, value);
            }
        }

        public Brush DependencyLineStroke
        {
            get
            {
                return (Brush)base.GetValue(DependencyLineStrokeProperty);
            }
            set
            {
                base.SetValue(DependencyLineStrokeProperty, value);
            }
        }

        public double DependencyLineStrokeThickness
        {
            get
            {
                return (double)base.GetValue(DependencyLineStrokeThicknessProperty);
            }
            set
            {
                base.SetValue(DependencyLineStrokeThicknessProperty, value);
            }
        }

        public DataTemplate DependencyLineTemplate
        {
            get
            {
                return (DataTemplate)base.GetValue(DependencyLineTemplateProperty);
            }
            set
            {
                base.SetValue(DependencyLineTemplateProperty, value);
            }
        }

        public Visibility DependencyToolTipVisibility
        {
            get
            {
                return (Visibility)base.GetValue(DependencyToolTipVisibilityProperty);
            }
            set
            {
                base.SetValue(DependencyToolTipVisibilityProperty, value);
            }
        }

        public DateTime DisplayedTime
        {
            get
            {
                return (DateTime)base.GetValue(DisplayedTimeProperty);
            }
            set
            {
                base.SetValue(DisplayedTimeProperty, value);
            }
        }

        public int? DisplayRowCount
        {
            get
            {
                return (int?)base.GetValue(DisplayRowCountProperty);
            }
            set
            {
                base.SetValue(DisplayRowCountProperty, value);
            }
        }

        public Brush HeaderBackground
        {
            get
            {
                return (Brush)base.GetValue(HeaderBackgroundProperty);
            }
            set
            {
                base.SetValue(HeaderBackgroundProperty, value);
            }
        }

        public FrameworkElement HeaderElement
        {
            get
            {
                if (!this.isTemplateApplied)
                {
                    base.ApplyTemplate();
                }
                if (this.headerScrollViewer == null)
                {
                    return null;
                }
                return (this.headerScrollViewer.Content as FrameworkElement);
            }
        }

        public double HeaderHeight
        {
            get
            {
                return (double)base.GetValue(HeaderHeightProperty);
            }
            set
            {
                base.SetValue(HeaderHeightProperty, value);
            }
        }

        public ScrollBar HorizontalScrollBar
        {
            get
            {
                if (!this.isTemplateApplied)
                {
                    base.ApplyTemplate();
                }
                return this.horizontalScrollBar;
            }
        }

        public double HourWidth
        {
            get
            {
                return (double)base.GetValue(HourWidthProperty);
            }
            set
            {
                base.SetValue(HourWidthProperty, value);
            }
        }

        public bool IsAsyncPresentationEnabled
        {
            get
            {
                return (bool)base.GetValue(IsAsyncPresentationEnabledProperty);
            }
            set
            {
                base.SetValue(IsAsyncPresentationEnabledProperty, value);
            }
        }

        public int IsAsyncPresentationEnabledMinCount
        {
            get
            {
                return (int)base.GetValue(IsAsyncPresentationEnabledMinCountProperty);
            }
            set
            {
                base.SetValue(IsAsyncPresentationEnabledMinCountProperty, value);
            }
        }

        public int IsAsyncPresentationEnabledPageSize
        {
            get
            {
                return (int)base.GetValue(IsAsyncPresentationEnabledPageSizeProperty);
            }
            set
            {
                base.SetValue(IsAsyncPresentationEnabledPageSizeProperty, value);
            }
        }

        public bool IsCurrentTimeLineVisible
        {
            get
            {
                return (bool)base.GetValue(IsCurrentTimeLineVisibleProperty);
            }
            set
            {
                base.SetValue(IsCurrentTimeLineVisibleProperty, value);
            }
        }

        public bool IsDependencyToolTipVisible
        {
            get
            {
                return (bool)base.GetValue(IsDependencyToolTipVisibleProperty);
            }
            set
            {
                base.SetValue(IsDependencyToolTipVisibleProperty, value);
            }
        }

        public bool IsItemLoadCompleted
        {
            get
            {
                if (this.asyncItemCount >= 0)
                {
                    return (this.asyncItemCount >= this.originalItems.Count);
                }
                return true;
            }
        }

        public bool IsNonworkingTimeHighlighted
        {
            get
            {
                return (bool)base.GetValue(IsNonworkingTimeHighlightedProperty);
            }
            set
            {
                base.SetValue(IsNonworkingTimeHighlightedProperty, value);
            }
        }

        public bool IsReadOnly
        {
            get
            {
                return (bool)base.GetValue(IsReadOnlyProperty);
            }
            set
            {
                base.SetValue(IsReadOnlyProperty, value);
            }
        }

        public bool IsScheduleCachingEnabled
        {
            get
            {
                return this.isScheduleCachingEnabled;
            }
            set
            {
                this.isScheduleCachingEnabled = value;
                if (this.isScheduleCachingEnabled)
                {
                    this.InitializeScheduleCaches();
                }
                else
                {
                    this.ClearScheduleCacheValues();
                    this.DeleteScheduleCaches();
                }
            }
        }

        public bool IsTaskCompletedEffortVisible
        {
            get
            {
                return (bool)base.GetValue(IsTaskCompletedEffortVisibleProperty);
            }
            set
            {
                base.SetValue(IsTaskCompletedEffortVisibleProperty, value);
            }
        }

        public bool IsTaskToolTipVisible
        {
            get
            {
                return (bool)base.GetValue(IsTaskToolTipVisibleProperty);
            }
            set
            {
                base.SetValue(IsTaskToolTipVisibleProperty, value);
            }
        }

        public bool IsVirtualizing
        {
            get
            {
                return (bool)base.GetValue(IsVirtualizingProperty);
            }
            set
            {
                base.SetValue(IsVirtualizingProperty, value);
            }
        }

        public GanttChartItem this[int index]
        {
            get
            {
                if (this.managedItems == null)
                {
                    return null;
                }
                return this.managedItems[index];
            }
        }

        public double ItemHeight
        {
            get
            {
                return (double)base.GetValue(ItemHeightProperty);
            }
            set
            {
                base.SetValue(ItemHeightProperty, value);
            }
        }

        public new ObservableCollection<GanttChartItem> Items
        {
            get
            {
                return (ObservableCollection<GanttChartItem>)base.GetValue(ItemsProperty);
            }
            set
            {
                base.SetValue(ItemsProperty, value);
            }
        }

        public GanttChartItemCollection ManagedItems
        {
            get
            {
                return this.managedItems;
            }
        }

        public Brush MilestoneBarFill
        {
            get
            {
                return (Brush)base.GetValue(MilestoneBarFillProperty);
            }
            set
            {
                base.SetValue(MilestoneBarFillProperty, value);
            }
        }

        public Brush MilestoneBarStroke
        {
            get
            {
                return (Brush)base.GetValue(MilestoneBarStrokeProperty);
            }
            set
            {
                base.SetValue(MilestoneBarStrokeProperty, value);
            }
        }

        public double MilestoneBarStrokeThickness
        {
            get
            {
                return (double)base.GetValue(MilestoneBarStrokeThicknessProperty);
            }
            set
            {
                base.SetValue(MilestoneBarStrokeThicknessProperty, value);
            }
        }

        public DataTemplate MilestoneTaskTemplate
        {
            get
            {
                return (DataTemplate)base.GetValue(MilestoneTaskTemplateProperty);
            }
            set
            {
                base.SetValue(MilestoneTaskTemplateProperty, value);
            }
        }

        public ObservableCollection<TimeInterval> NonworkingIntervals
        {
            get
            {
                return (ObservableCollection<TimeInterval>)base.GetValue(NonworkingIntervalsProperty);
            }
            set
            {
                base.SetValue(NonworkingIntervalsProperty, value);
            }
        }

        public Brush NonworkingTimeBackground
        {
            get
            {
                return (Brush)base.GetValue(NonworkingTimeBackgroundProperty);
            }
            set
            {
                base.SetValue(NonworkingTimeBackgroundProperty, value);
            }
        }

        public DataTemplate PredecessorToolTipTemplate
        {
            get
            {
                return (DataTemplate)base.GetValue(PredecessorToolTipTemplateProperty);
            }
            set
            {
                base.SetValue(PredecessorToolTipTemplateProperty, value);
            }
        }

        public double ScaleHeaderHeight
        {
            get
            {
                return (double)base.GetValue(ScaleHeaderHeightProperty);
            }
            set
            {
                base.SetValue(ScaleHeaderHeightProperty, value);
            }
        }

        public ScaleCollection Scales
        {
            get
            {
                return (ScaleCollection)base.GetValue(ScalesProperty);
            }
            set
            {
                base.SetValue(ScalesProperty, value);
            }
        }

        public System.Windows.Controls.ScrollContentPresenter ScrollContentPresenter
        {
            get
            {
                if (!this.isTemplateApplied)
                {
                    base.ApplyTemplate();
                }
                return this.scrollContentPresenter;
            }
        }

        public System.Windows.Controls.ScrollViewer ScrollViewer
        {
            get
            {
                if (!this.isTemplateApplied)
                {
                    base.ApplyTemplate();
                }
                return this.scrollViewer;
            }
        }

        public double StandardBarCornerRadius
        {
            get
            {
                return (double)base.GetValue(StandardBarCornerRadiusProperty);
            }
            set
            {
                base.SetValue(StandardBarCornerRadiusProperty, value);
            }
        }

        public Brush StandardBarFill
        {
            get
            {
                return (Brush)base.GetValue(StandardBarFillProperty);
            }
            set
            {
                base.SetValue(StandardBarFillProperty, value);
            }
        }

        public Brush StandardBarStroke
        {
            get
            {
                return (Brush)base.GetValue(StandardBarStrokeProperty);
            }
            set
            {
                base.SetValue(StandardBarStrokeProperty, value);
            }
        }

        public double StandardBarStrokeThickness
        {
            get
            {
                return (double)base.GetValue(StandardBarStrokeThicknessProperty);
            }
            set
            {
                base.SetValue(StandardBarStrokeThicknessProperty, value);
            }
        }

        public double StandardCompletedBarCornerRadius
        {
            get
            {
                return (double)base.GetValue(StandardCompletedBarCornerRadiusProperty);
            }
            set
            {
                base.SetValue(StandardCompletedBarCornerRadiusProperty, value);
            }
        }

        public Brush StandardCompletedBarFill
        {
            get
            {
                return (Brush)base.GetValue(StandardCompletedBarFillProperty);
            }
            set
            {
                base.SetValue(StandardCompletedBarFillProperty, value);
            }
        }

        public Brush StandardCompletedBarStroke
        {
            get
            {
                return (Brush)base.GetValue(StandardCompletedBarStrokeProperty);
            }
            set
            {
                base.SetValue(StandardCompletedBarStrokeProperty, value);
            }
        }

        public double StandardCompletedBarStrokeThickness
        {
            get
            {
                return (double)base.GetValue(StandardCompletedBarStrokeThicknessProperty);
            }
            set
            {
                base.SetValue(StandardCompletedBarStrokeThicknessProperty, value);
            }
        }

        public DataTemplate StandardTaskTemplate
        {
            get
            {
                return (DataTemplate)base.GetValue(StandardTaskTemplateProperty);
            }
            set
            {
                base.SetValue(StandardTaskTemplateProperty, value);
            }
        }

        public Brush SummaryBarFill
        {
            get
            {
                return (Brush)base.GetValue(SummaryBarFillProperty);
            }
            set
            {
                base.SetValue(SummaryBarFillProperty, value);
            }
        }

        public Brush SummaryBarStroke
        {
            get
            {
                return (Brush)base.GetValue(SummaryBarStrokeProperty);
            }
            set
            {
                base.SetValue(SummaryBarStrokeProperty, value);
            }
        }

        public double SummaryBarStrokeThickness
        {
            get
            {
                return (double)base.GetValue(SummaryBarStrokeThicknessProperty);
            }
            set
            {
                base.SetValue(SummaryBarStrokeThicknessProperty, value);
            }
        }

        public DataTemplate SummaryTaskTemplate
        {
            get
            {
                return (DataTemplate)base.GetValue(SummaryTaskTemplateProperty);
            }
            set
            {
                base.SetValue(SummaryTaskTemplateProperty, value);
            }
        }

        public Visibility TaskCompletedEffortVisibility
        {
            get
            {
                return (Visibility)base.GetValue(TaskCompletedEffortVisibilityProperty);
            }
            set
            {
                base.SetValue(TaskCompletedEffortVisibilityProperty, value);
            }
        }

        public Visibility TaskToolTipVisibility
        {
            get
            {
                return (Visibility)base.GetValue(TaskToolTipVisibilityProperty);
            }
            set
            {
                base.SetValue(TaskToolTipVisibilityProperty, value);
            }
        }

        public Visibility ThumbVisibility
        {
            get
            {
                return (Visibility)base.GetValue(ThumbVisibilityProperty);
            }
            set
            {
                base.SetValue(ThumbVisibilityProperty, value);
            }
        }

        public DateTime TimelinePageFinish
        {
            get
            {
                return (DateTime)base.GetValue(TimelinePageFinishProperty);
            }
            set
            {
                base.SetValue(TimelinePageFinishProperty, value);
            }
        }

        public DateTime TimelinePageStart
        {
            get
            {
                return (DateTime)base.GetValue(TimelinePageStartProperty);
            }
            set
            {
                base.SetValue(TimelinePageStartProperty, value);
            }
        }

        public DataTemplate ToolTipTemplate
        {
            get
            {
                return (DataTemplate)base.GetValue(ToolTipTemplateProperty);
            }
            set
            {
                base.SetValue(ToolTipTemplateProperty, value);
            }
        }

        public TimeSpan UpdateScaleInterval
        {
            get
            {
                return (TimeSpan)base.GetValue(UpdateScaleIntervalProperty);
            }
            set
            {
                base.SetValue(UpdateScaleIntervalProperty, value);
            }
        }

        public TimeSpan UpdateTimelinePageAmount
        {
            get
            {
                return (TimeSpan)base.GetValue(UpdateTimelinePageAmountProperty);
            }
            set
            {
                base.SetValue(UpdateTimelinePageAmountProperty, value);
            }
        }

        public ScrollBar VerticalScrollBar
        {
            get
            {
                if (!this.isTemplateApplied)
                {
                    base.ApplyTemplate();
                }
                return this.verticalScrollBar;
            }
        }

        public TimeOfDay VisibleDayFinish
        {
            get
            {
                return (TimeOfDay)base.GetValue(VisibleDayFinishProperty);
            }
            set
            {
                base.SetValue(VisibleDayFinishProperty, value);
            }
        }

        public TimeOfDay VisibleDayStart
        {
            get
            {
                return (TimeOfDay)base.GetValue(VisibleDayStartProperty);
            }
            set
            {
                base.SetValue(VisibleDayStartProperty, value);
            }
        }

        public DayOfWeek VisibleWeekFinish
        {
            get
            {
                return (DayOfWeek)base.GetValue(VisibleWeekFinishProperty);
            }
            set
            {
                base.SetValue(VisibleWeekFinishProperty, value);
            }
        }

        public DayOfWeek VisibleWeekStart
        {
            get
            {
                return (DayOfWeek)base.GetValue(VisibleWeekStartProperty);
            }
            set
            {
                base.SetValue(VisibleWeekStartProperty, value);
            }
        }

        public TimeOfDay WorkingDayFinish
        {
            get
            {
                return (TimeOfDay)base.GetValue(WorkingDayFinishProperty);
            }
            set
            {
                base.SetValue(WorkingDayFinishProperty, value);
            }
        }

        public TimeOfDay WorkingDayStart
        {
            get
            {
                return (TimeOfDay)base.GetValue(WorkingDayStartProperty);
            }
            set
            {
                base.SetValue(WorkingDayStartProperty, value);
            }
        }

        public Brush WorkingTimeBackground
        {
            get
            {
                return (Brush)base.GetValue(WorkingTimeBackgroundProperty);
            }
            set
            {
                base.SetValue(WorkingTimeBackgroundProperty, value);
            }
        }

        public DayOfWeek WorkingWeekFinish
        {
            get
            {
                return (DayOfWeek)base.GetValue(WorkingWeekFinishProperty);
            }
            set
            {
                base.SetValue(WorkingWeekFinishProperty, value);
            }
        }

        public DayOfWeek WorkingWeekStart
        {
            get
            {
                return (DayOfWeek)base.GetValue(WorkingWeekStartProperty);
            }
            set
            {
                base.SetValue(WorkingWeekStartProperty, value);
            }
        }

        public class DocumentPaginator : System.Windows.Documents.DocumentPaginator
        {
            private GanttChartView control;

            public DocumentPaginator(GanttChartView control)
            {
                this.control = control;
            }

            public override DocumentPage GetPage(int pageNumber)
            {
                if (pageNumber < 0)
                {
                    return DocumentPage.Missing;
                }
                double num = Math.IEEERemainder(((this.PageSize.Height - 2.0) - 32.0) - this.control.HeaderHeight, this.control.ItemHeight);
                if (num < 0.0)
                {
                    num += this.control.ItemHeight;
                }
                double num2 = this.PageSize.Height - num;
                Size pageSize = new Size(Math.Max((double)1.0, (double)((this.PageSize.Width - 2.0) - 32.0)), Math.Max((double)1.0, (double)((num2 - 2.0) - 32.0)));
                int exportVerticalLength = this.control.GetExportVerticalLength(pageSize);
                int exportHorizontalLength = this.control.GetExportHorizontalLength(pageSize);
                int i = pageNumber / exportHorizontalLength;
                int j = pageNumber % exportHorizontalLength;
                if ((i >= exportVerticalLength) || (j >= exportHorizontalLength))
                {
                    return DocumentPage.Missing;
                }
                BitmapSource source = this.control.GetExportBitmapSource(pageSize, i, j);
                FrameworkElement visual = new Border
                {
                    Child = new Image { Source = source, VerticalAlignment = VerticalAlignment.Top },
                    BorderBrush = new SolidColorBrush(Colors.DarkGray),
                    BorderThickness = new Thickness(1.0),
                    Margin = new Thickness(16.0)
                };
                visual.Measure(this.PageSize);
                visual.Arrange(new Rect(this.PageSize));
                return new DocumentPage(visual);
            }

            public GanttChartView Control
            {
                get
                {
                    return this.control;
                }
            }

            public override bool IsPageCountValid
            {
                get
                {
                    return true;
                }
            }

            public override int PageCount
            {
                get
                {
                    return (this.control.GetExportVerticalLength(this.PageSize) * this.control.GetExportHorizontalLength(this.PageSize));
                }
            }

            public override Size PageSize { get; set; }

            public override IDocumentPaginatorSource Source
            {
                get
                {
                    return null;
                }
            }
        }
    }
}

