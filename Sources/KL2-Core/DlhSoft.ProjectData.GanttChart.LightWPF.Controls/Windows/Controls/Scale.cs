namespace DlhSoft.Windows.Controls
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Collections.Specialized;
    using System.Windows;
    using System.Windows.Media;
    using System.Windows.Media.Animation;

    public class Scale : Animatable
    {
        private List<ScaleInterval> autoGeneratedIntervals = new List<ScaleInterval>();
        public static readonly DependencyProperty BackgroundProperty = DependencyProperty.Register("Background", typeof(Brush), typeof(DlhSoft.Windows.Controls.Scale), new PropertyMetadata(null));
        public static readonly DependencyProperty BorderBrushProperty = DependencyProperty.Register("BorderBrush", typeof(Brush), typeof(DlhSoft.Windows.Controls.Scale), new PropertyMetadata(null));
        public static readonly DependencyProperty BorderThicknessProperty = DependencyProperty.Register("BorderThickness", typeof(Thickness), typeof(DlhSoft.Windows.Controls.Scale), new PropertyMetadata(new Thickness()));
        private DlhSoft.Windows.Controls.GanttChartView ganttChartView;
        public static readonly DependencyProperty HeaderBackgroundProperty = DependencyProperty.Register("HeaderBackground", typeof(Brush), typeof(DlhSoft.Windows.Controls.Scale), new PropertyMetadata(null));
        public static readonly DependencyProperty HeaderBorderBrushProperty = DependencyProperty.Register("HeaderBorderBrush", typeof(Brush), typeof(DlhSoft.Windows.Controls.Scale), new PropertyMetadata(null));
        public static readonly DependencyProperty HeaderBorderThicknessProperty = DependencyProperty.Register("HeaderBorderThickness", typeof(Thickness), typeof(DlhSoft.Windows.Controls.Scale), new PropertyMetadata(new Thickness()));
        public static readonly DependencyProperty HeaderContentFormatProperty = DependencyProperty.Register("HeaderContentFormat", typeof(TimeScaleTextFormat), typeof(DlhSoft.Windows.Controls.Scale), new PropertyMetadata(TimeScaleTextFormat.ScaleTypeDefault, new PropertyChangedCallback(DlhSoft.Windows.Controls.Scale.OnHeaderContentFormatChanged)));
        public static readonly DependencyProperty HeaderContentTemplateProperty = DependencyProperty.Register("HeaderContentTemplate", typeof(DataTemplate), typeof(DlhSoft.Windows.Controls.Scale), new PropertyMetadata(null));
        // Modif Tekigo : passage de la valeur par défaut à double.NaN pour que la valeur soit correcte.
        public static readonly DependencyProperty HeaderHeightProperty = DependencyProperty.Register("HeaderHeight", typeof(double), typeof(DlhSoft.Windows.Controls.Scale), new PropertyMetadata(double.NaN));
        public static readonly DependencyProperty ScaleTypeProperty = DependencyProperty.Register("ScaleType", typeof(DlhSoft.Windows.Controls.ScaleType), typeof(DlhSoft.Windows.Controls.Scale), new PropertyMetadata(DlhSoft.Windows.Controls.ScaleType.Custom, new PropertyChangedCallback(DlhSoft.Windows.Controls.Scale.OnScaleTypeChanged)));

        public Scale()
        {
            _intervals = new ObservableCollection<ScaleInterval>();
            _intervals.CollectionChanged += Intervals_CollectionChanged;
        }

        private string GetDateTimeString(DateTime dateTime, TimeScaleTextFormat HeaderContentFormat, DlhSoft.Windows.Controls.ScaleType ScaleType)
        {
            switch (HeaderContentFormat)
            {
                case TimeScaleTextFormat.ScaleTypeDefault:
                    switch (ScaleType)
                    {
                        case DlhSoft.Windows.Controls.ScaleType.Years:
                            return string.Format("{0:yyyy}", dateTime);

                        case DlhSoft.Windows.Controls.ScaleType.Quarters:
                        case DlhSoft.Windows.Controls.ScaleType.Months:
                            return string.Format("{0:MMMM} {0:yyyy}", dateTime);

                        case DlhSoft.Windows.Controls.ScaleType.Weeks:
                        case DlhSoft.Windows.Controls.ScaleType.WeeksStartingMonday:
                        case DlhSoft.Windows.Controls.ScaleType.Days:
                            return string.Format("{0:d}", dateTime);

                        case DlhSoft.Windows.Controls.ScaleType.Hours:
                            return string.Format("{0:HH} {0:d}", dateTime);

                        case DlhSoft.Windows.Controls.ScaleType.NonworkingTime:
                            return string.Format("{0:d}", dateTime);
                    }
                    break;

                case TimeScaleTextFormat.DateTime:
                    return string.Format("{0:g}", dateTime);

                case TimeScaleTextFormat.ShortDate:
                    return string.Format("{0:d}", dateTime);

                case TimeScaleTextFormat.LongDate:
                    return string.Format("{0:D}", dateTime);

                case TimeScaleTextFormat.Hour:
                    return string.Format("{0:H}", dateTime);

                case TimeScaleTextFormat.HourLeadingZero:
                    return string.Format("{0:HH}", dateTime);

                case TimeScaleTextFormat.DayOfWeekInitial:
                    {
                        string str = string.Format("{0:dddd}", dateTime);
                        return str.Substring(0, Math.Min(1, str.Length)).ToUpper();
                    }
                case TimeScaleTextFormat.DayOfWeekTwoInitials:
                    {
                        string str2 = string.Format("{0:dddd}", dateTime);
                        return str2.Substring(0, Math.Min(2, str2.Length)).ToUpper();
                    }
                case TimeScaleTextFormat.DayOfWeekAbbreviation:
                    return string.Format("{0:ddd}", dateTime);

                case TimeScaleTextFormat.DayOfWeek:
                    return string.Format("{0:dddd}", dateTime);

                case TimeScaleTextFormat.Day:
                    return string.Format("{0:%d}", dateTime);

                case TimeScaleTextFormat.DayLeadingZero:
                    return string.Format("{0:dd}", dateTime);

                case TimeScaleTextFormat.NumericMonth:
                    return string.Format("{0:M}", dateTime);

                case TimeScaleTextFormat.NumericMonthLeadingZero:
                    return string.Format("{0:MM}", dateTime);

                case TimeScaleTextFormat.MonthAbbreviation:
                    return string.Format("{0:MMM}", dateTime);

                case TimeScaleTextFormat.Month:
                    return string.Format("{0:MMMM}", dateTime);

                case TimeScaleTextFormat.MonthDay:
                    return string.Format("{0:M}", dateTime);

                case TimeScaleTextFormat.Year:
                    return string.Format("{0:yyyy}", dateTime);

                case TimeScaleTextFormat.YearOfCentury:
                    return string.Format("{0:yy}", dateTime);

                case TimeScaleTextFormat.YearMonth:
                    return string.Format("{0:y}", dateTime);

                default:
                    return null;
            }
            return string.Format("{0:g}", dateTime);
        }

        private void Intervals_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    this.SetManagedIntervals(e.NewItems);
                    return;

                case NotifyCollectionChangedAction.Remove:
                case NotifyCollectionChangedAction.Move:
                    break;

                case NotifyCollectionChangedAction.Replace:
                case NotifyCollectionChangedAction.Reset:
                    this.SetManagedIntervals(e.NewItems);
                    break;

                default:
                    return;
            }
        }

        private static void OnHeaderContentFormatChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            DlhSoft.Windows.Controls.Scale scale = d as DlhSoft.Windows.Controls.Scale;
            if (scale != null)
            {
                scale.UpdateIntervals();
            }
        }

        private static void OnScaleTypeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            DlhSoft.Windows.Controls.Scale scale = d as DlhSoft.Windows.Controls.Scale;
            if (scale != null)
            {
                scale.UpdateHeaderHeight();
                scale.UpdateIntervals();
            }
        }

        private void SetManagedIntervals(IList intervals)
        {
            if (intervals != null)
                foreach (ScaleInterval interval in intervals)
                {
                    interval.Scale = this;
                }
        }

        internal void UpdateHeaderHeight()
        {
            if (double.IsNaN(this.HeaderHeight))
            {
                if (((this.ScaleType == DlhSoft.Windows.Controls.ScaleType.NonworkingTime) || (this.ScaleType == DlhSoft.Windows.Controls.ScaleType.CurrentTime)) || (this.ScaleType == DlhSoft.Windows.Controls.ScaleType.FutureTime))
                {
                    this.HeaderHeight = 0.0;
                }
                else if ((this.GanttChartView != null) && !double.IsNaN(this.GanttChartView.ScaleHeaderHeight))
                {
                    this.HeaderHeight = this.GanttChartView.ScaleHeaderHeight;
                }
            }
        }

        internal void UpdateIntervals()
        {
            if ((this.GanttChartView != null) && (this.Intervals != null))
            {
                foreach (ScaleInterval interval in this.autoGeneratedIntervals)
                {
                    this.Intervals.Remove(interval);
                }
                this.autoGeneratedIntervals.Clear();
                switch (this.ScaleType)
                {
                    case DlhSoft.Windows.Controls.ScaleType.Years:
                        {
                            DateTime nextVisibleTime = this.GanttChartView.GetNextVisibleTime(this.GanttChartView.TimelinePageStart);
                            DateTime timelinePageFinish = this.GanttChartView.TimelinePageFinish;
                            while (nextVisibleTime < timelinePageFinish)
                            {
                                DateTime finish = this.GanttChartView.GetNextVisibleTime(new DateTime(nextVisibleTime.Year + 1, 1, 1));
                                this.autoGeneratedIntervals.Add(new ScaleInterval(nextVisibleTime, finish));
                                nextVisibleTime = finish;
                            }
                            break;
                        }
                    case DlhSoft.Windows.Controls.ScaleType.Quarters:
                        {
                            DateTime start = this.GanttChartView.GetNextVisibleTime(this.GanttChartView.TimelinePageStart);
                            DateTime time8 = this.GanttChartView.TimelinePageFinish;
                            while (start < time8)
                            {
                                DateTime time9 = this.GanttChartView.GetNextVisibleTime(new DateTime((start.Month < 9) ? start.Year : (start.Year + 1), (start.Month < 9) ? (((((start.Month - 1) / 3) + 1) * 3) + 1) : 1, 1));
                                this.autoGeneratedIntervals.Add(new ScaleInterval(start, time9));
                                start = time9;
                            }
                            break;
                        }
                    case DlhSoft.Windows.Controls.ScaleType.Months:
                        {
                            DateTime time10 = this.GanttChartView.GetNextVisibleTime(this.GanttChartView.TimelinePageStart);
                            DateTime time11 = this.GanttChartView.TimelinePageFinish;
                            while (time10 < time11)
                            {
                                DateTime time12 = this.GanttChartView.GetNextVisibleTime(new DateTime((time10.Month < 12) ? time10.Year : (time10.Year + 1), (time10.Month < 12) ? (time10.Month + 1) : 1, 1));
                                this.autoGeneratedIntervals.Add(new ScaleInterval(time10, time12));
                                time10 = time12;
                            }
                            break;
                        }
                    case DlhSoft.Windows.Controls.ScaleType.Weeks:
                        {
                            DateTime time13 = this.GanttChartView.GetNextVisibleTime(this.GanttChartView.TimelinePageStart);
                            DateTime time14 = this.GanttChartView.TimelinePageFinish;
                            while (time13 < time14)
                            {
                                DateTime time15 = this.GanttChartView.GetNextVisibleTime(time13.Date.AddDays((double)(7 - time13.DayOfWeek)));
                                this.autoGeneratedIntervals.Add(new ScaleInterval(time13, time15));
                                time13 = time15;
                            }
                            break;
                        }
                    case DlhSoft.Windows.Controls.ScaleType.WeeksStartingMonday:
                        {
                            DateTime time16 = this.GanttChartView.GetNextVisibleTime(this.GanttChartView.TimelinePageStart);
                            DateTime time17 = this.GanttChartView.TimelinePageFinish;
                            while (time16 < time17)
                            {
                                DateTime time18 = this.GanttChartView.GetNextVisibleTime(time16.Date.AddDays((double)((7 - time16.DayOfWeek) + 1)));
                                this.autoGeneratedIntervals.Add(new ScaleInterval(time16, time18));
                                time16 = time18;
                            }
                            break;
                        }
                    case DlhSoft.Windows.Controls.ScaleType.Days:
                        {
                            DateTime time19 = this.GanttChartView.GetNextVisibleTime(this.GanttChartView.TimelinePageStart);
                            DateTime time20 = this.GanttChartView.TimelinePageFinish;
                            while (time19 < time20)
                            {
                                DateTime time21 = this.GanttChartView.GetNextVisibleTime(time19.Date.AddDays(1.0));
                                this.autoGeneratedIntervals.Add(new ScaleInterval(time19, time21));
                                time19 = time21;
                            }
                            break;
                        }
                    case DlhSoft.Windows.Controls.ScaleType.Hours:
                        {
                            DateTime time22 = this.GanttChartView.GetNextVisibleTime(this.GanttChartView.TimelinePageStart);
                            DateTime time23 = this.GanttChartView.TimelinePageFinish;
                            while (time22 < time23)
                            {
                                DateTime time24 = this.GanttChartView.GetNextVisibleTime(new DateTime((((time22.Hour < 0x17) || (time22.Day < DateTime.DaysInMonth(time22.Year, time22.Month))) || (time22.Month < 12)) ? time22.Year : (time22.Year + 1), ((time22.Hour < 0x17) || (time22.Day < DateTime.DaysInMonth(time22.Year, time22.Month))) ? time22.Month : (time22.Month + 1), (time22.Hour < 0x17) ? time22.Day : (time22.Day + 1), (time22.Hour < 0x17) ? (time22.Hour + 1) : 0, 0, 0));
                                this.autoGeneratedIntervals.Add(new ScaleInterval(time22, time24));
                                time22 = time24;
                            }
                            break;
                        }
                    case DlhSoft.Windows.Controls.ScaleType.NonworkingTime:
                        {
                            DateTime nextVisibleNonworkingTime = this.GanttChartView.GetNextVisibleNonworkingTime(this.GanttChartView.TimelinePageStart);
                            DateTime previousVisibleNonworkingTime = this.GanttChartView.GetPreviousVisibleNonworkingTime(this.GanttChartView.TimelinePageFinish);
                            while (nextVisibleNonworkingTime < previousVisibleNonworkingTime)
                            {
                                DateTime nextVisibleWorkingTime = this.GanttChartView.GetNextVisibleWorkingTime(nextVisibleNonworkingTime);
                                if (nextVisibleWorkingTime > previousVisibleNonworkingTime)
                                {
                                    nextVisibleWorkingTime = previousVisibleNonworkingTime;
                                }
                                if (nextVisibleWorkingTime > nextVisibleNonworkingTime)
                                {
                                    double position = this.GanttChartView.GetPosition(nextVisibleNonworkingTime);
                                    double finishPosition = this.GanttChartView.GetPosition(nextVisibleWorkingTime);
                                    if (finishPosition > position)
                                    {
                                        this.autoGeneratedIntervals.Add(new ScaleInterval(nextVisibleNonworkingTime, nextVisibleWorkingTime, position, finishPosition));
                                        position = finishPosition;
                                    }
                                    nextVisibleNonworkingTime = this.GanttChartView.GetNextVisibleNonworkingTime(nextVisibleWorkingTime);
                                }
                            }
                            break;
                        }
                    case DlhSoft.Windows.Controls.ScaleType.CurrentTime:
                        {
                            DateTime now = DateTime.Now;
                            if (now > this.GanttChartView.TimelinePageFinish)
                            {
                                now = this.GanttChartView.TimelinePageFinish;
                            }
                            if (now > this.GanttChartView.TimelinePageStart)
                            {
                                this.autoGeneratedIntervals.Add(new ScaleInterval(this.GanttChartView.TimelinePageStart, now) { HeaderContent = this.GetDateTimeString(now, this.HeaderContentFormat, this.ScaleType) });
                            }
                            break;
                        }
                    case DlhSoft.Windows.Controls.ScaleType.FutureTime:
                        {
                            DateTime timelinePageStart = DateTime.Now;
                            if (timelinePageStart < this.GanttChartView.TimelinePageStart)
                            {
                                timelinePageStart = this.GanttChartView.TimelinePageStart;
                            }
                            if (timelinePageStart < this.GanttChartView.TimelinePageFinish)
                            {
                                this.autoGeneratedIntervals.Add(new ScaleInterval(timelinePageStart, this.GanttChartView.TimelinePageFinish));
                            }
                            break;
                        }
                }
                foreach (ScaleInterval interval3 in this.autoGeneratedIntervals)
                {
                    this.Intervals.Add(interval3);
                }
                foreach (ScaleInterval interval4 in this.Intervals)
                {
                    interval4.Scale = this;
                    if (((interval4.HeaderContent == null) && (this.ScaleType != DlhSoft.Windows.Controls.ScaleType.Custom)) && (this.HeaderContentFormat != TimeScaleTextFormat.Custom))
                    {
                        interval4.HeaderContent = this.GetDateTimeString(interval4.TimeInterval.Start, this.HeaderContentFormat, this.ScaleType);
                    }
                    interval4.UpdateBar();
                }
            }
        }

        public Brush Background
        {
            get
            {
                return (Brush)base.GetValue(BackgroundProperty);
            }
            set
            {
                base.SetValue(BackgroundProperty, value);
            }
        }

        public Brush BorderBrush
        {
            get
            {
                return (Brush)base.GetValue(BorderBrushProperty);
            }
            set
            {
                base.SetValue(BorderBrushProperty, value);
            }
        }

        public Thickness BorderThickness
        {
            get
            {
                return (Thickness)base.GetValue(BorderThicknessProperty);
            }
            set
            {
                base.SetValue(BorderThicknessProperty, value);
            }
        }

        public DlhSoft.Windows.Controls.GanttChartView GanttChartView
        {
            get
            {
                return this.ganttChartView;
            }
            internal set
            {
                this.ganttChartView = value;
                this.UpdateHeaderHeight();
                this.UpdateIntervals();
            }
        }

        public Brush HeaderBackground
        {
            get
            {
                return (Brush)base.GetValue(HeaderBackgroundProperty);
            }
            set
            {
                base.SetValue(HeaderBackgroundProperty, value);
            }
        }

        public Brush HeaderBorderBrush
        {
            get
            {
                return (Brush)base.GetValue(HeaderBorderBrushProperty);
            }
            set
            {
                base.SetValue(HeaderBorderBrushProperty, value);
            }
        }

        public Thickness HeaderBorderThickness
        {
            get
            {
                return (Thickness)base.GetValue(HeaderBorderThicknessProperty);
            }
            set
            {
                base.SetValue(HeaderBorderThicknessProperty, value);
            }
        }

        public TimeScaleTextFormat HeaderContentFormat
        {
            get
            {
                return (TimeScaleTextFormat)base.GetValue(HeaderContentFormatProperty);
            }
            set
            {
                base.SetValue(HeaderContentFormatProperty, value);
            }
        }

        public DataTemplate HeaderContentTemplate
        {
            get
            {
                return (DataTemplate)base.GetValue(HeaderContentTemplateProperty);
            }
            set
            {
                base.SetValue(HeaderContentTemplateProperty, value);
            }
        }

        public double HeaderHeight
        {
            get
            {
                return (double)base.GetValue(HeaderHeightProperty);
            }
            set
            {
                base.SetValue(HeaderHeightProperty, value);
            }
        }

        private ObservableCollection<ScaleInterval> _intervals;
        public ObservableCollection<ScaleInterval> Intervals
        {
            get { return _intervals; }
        }

        public DlhSoft.Windows.Controls.ScaleType ScaleType
        {
            get
            {
                return (DlhSoft.Windows.Controls.ScaleType)base.GetValue(ScaleTypeProperty);
            }
            set
            {
                base.SetValue(ScaleTypeProperty, value);
            }
        }

        protected override Freezable CreateInstanceCore()
        {
            return new Scale();
        }
    }
}

