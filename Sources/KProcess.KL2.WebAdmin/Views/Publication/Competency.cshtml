@using KProcess.KL2.WebAdmin.Models.Publications;
@using System.Web.Mvc.Html;
@using KProcess.KL2.JWT;
@using KProcess.KL2.Languages;

@model CompetenciesViewModel

@{
    var LocalizedStrings = (ILocalizationManager)ViewBag.LocalizedStrings;
    ViewBag.Title = LocalizedStrings.GetString("Competency");
    UserModel user = JwtTokenProvider.GetUserModel(Request.Cookies["token"].Value);

    var ejLanguageCode = "en";
    var currentUserLanguageCode = JwtTokenProvider.GetUserModelCurrentLanguage(Request.Cookies["token"].Value);
    if (currentUserLanguageCode != null)
    {
        ejLanguageCode = currentUserLanguageCode.ToString().Split('-')[0];
    }
    else
    {
        if (user.DefaultLanguageCode != null)
        {
            ejLanguageCode = user.DefaultLanguageCode.Split('-')[0];
        }
    }

    List<object> cols = new List<object>();
    cols.Add(new { field = "Fullname", direction = "Ascending" });
}

<style id="notedStyle">
    .readCell {
        background-color: lightgreen;
    }

    .notReadCell {
        background-color: lightcoral;
    }

    .innerContainer {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .innerContent {
        flex: 1;
        min-height: 0px;
        display: flex;
        flex-direction: column;
    }

    .e-grid .e-headercelldiv {
        overflow: visible !important;
    }

    .e-grid.e-wrap .e-stackedheader .e-columnheader .e-stackedheadercelldiv, .e-grid.e-wrap .e-stackedheader .e-columnheader .e-headercelldiv {
        max-height: none;
    }
</style>

<div class="innerContainer">
    <div class="innerContent">
        <div class="row">
            @{
                if (Model.ProcessCompetencyViewModel.Count() != 0 || Model.TaskCompetencyViewModel.Count() != 0)
                {
                    <div class="col-12">
                        @using (Html.BeginForm("Competency", "Publication", FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "onFilter(event)" }))
                        {
                            <div class="filterBar">
                                @Html.Label(LocalizedStrings.GetString("Team"))
                                @Html.EJS().DropDownList("team").DataSource(u => u.Url(@Url.Action("GetTeams")).Adaptor("UrlAdaptor")).Placeholder("Select team to filter").Fields(df => df.Text("Name").Value("Id")).Width("100%").Index((Model.selectedIndexTeam.ToString() == "") ? 0 : Model.selectedIndexTeam).Render()
                            </div>
                            <div class="filterBar">
                                @Html.Label(LocalizedStrings.GetString("Position"))
                                @Html.EJS().DropDownList("position").DataSource(u => u.Url(@Url.Action("GetTenured")).Adaptor("UrlAdaptor")).Placeholder("Select position to filter").Fields(df => df.Text("Text").Value("Value")).Width("100%").Index((Model.selectedIndexPosition.ToString() == "") ? 0 : Model.selectedIndexPosition).Render()
                            </div>
                            <div class="filterBar">
                                @Html.EJS().Button("filterBtn").Content(LocalizedStrings.GetString("Filter")).CssClass("filterBtn").Render()
                            </div>
                        }
                    </div>
                }
            }
        </div>
        <div style="flex: 1; min-height: 0px;">
            @{
                if (Model.ProcessCompetencyViewModel.Count() != 0 || Model.TaskCompetencyViewModel.Count() != 0)
                {
                    @(Html.EJS().Grid("Competency")
                                .Height("100%")
                                .DataSource(ds => ds.Json(Model.UserCompetencyViewModel.ToArray()).Adaptor("RemoteSaveAdaptor"))
                                .GridLines(Syncfusion.EJ2.Grids.GridLine.Both)
                                .AllowPaging()
                                .PageSettings(p => p.PageSize(25))
                                .Locale(ejLanguageCode)
                                //Excel export
                                .AllowExcelExport()
                                .HeaderCellInfo("gridHeaderCellInfo")
                                .ExcelQueryCellInfo("excelQueryCellInfo")
                                .AllowSelection(false)
                                .AllowTextWrap()
                                .AllowFiltering()
                                .FilterSettings(f => f.Type(Syncfusion.EJ2.Grids.FilterType.Excel))
                                .EnableHover()
                                .Toolbar(new List<string>() { "ExcelExport" })
                                .ToolbarClick("toolbarClick")
                                .DataBound("onDataBound")
                                .AllowSorting()
                                .AllowMultiSorting()
                                .SortSettings(sort => sort.Columns(cols))
                                .FrozenColumns(2)
                                .Columns(col =>
                                {
                                    col.Field("UserId").IsPrimaryKey(true).HeaderText(LocalizedStrings.GetString("User_Id")).Visible(false).IsIdentity(true).Width(5).Add();
                                    col.Field("Fullname").HeaderText(LocalizedStrings.GetString("Operators")).Width(200).AllowFiltering(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Add();
                                    if (Model.ProcessCompetencyViewModel.Count() > 0)
                                    {
                                        var processColumnList = new List<Syncfusion.EJ2.Grids.GridColumn>();
                                        for (var i = 0; i < Model.ProcessCompetencyViewModel.Count(); i++)
                                        {
                                            processColumnList.Add(new Syncfusion.EJ2.Grids.GridColumn
                                            {
                                                Field = $"HasCompetencyData.{i}",
                                                HeaderText = Model.ProcessCompetencyViewModel.Select(r => r.Label).ElementAt(i),
                                                HeaderTemplate = "<span class='headerTextCustom' data-toggle='tooltip' title='" + Model.ProcessCompetencyViewModel.Select(r => r.Label).ElementAt(i) + "'>" + Model.ProcessCompetencyViewModel.Select(r => r.Label).ElementAt(i) + "</span>",
                                                TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center,
                                                Width = "100",
                                                AllowFiltering = false
                                            });
                                        }
                                        col.HeaderText(LocalizedStrings.GetString("Procedure"))
                                            .Columns(processColumnList)
                                            .TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center)
                                            .Add();
                                    }
                                    if (Model.TaskCompetencyViewModel.Count() > 0)
                                    {
                                        var taskColumnList = new List<Syncfusion.EJ2.Grids.GridColumn>();
                                        int dataIndex = Model.ProcessCompetencyViewModel.Count();
                                        foreach (var taskComp in Model.TaskCompetencyViewModel)
                                        {
                                            taskColumnList.Add(new Syncfusion.EJ2.Grids.GridColumn
                                            {
                                                Field = $"HasCompetencyData.{dataIndex}",
                                                HeaderText = taskComp.Label,
                                                HeaderTemplate = "<span class='headerTextCustom' data-toggle='tooltip' title='" + taskComp.Label + "'>" + taskComp.Label + "</span>",
                                                TextAlign = Syncfusion.EJ2.Grids.TextAlign.Center,
                                                Width = "100",
                                                AllowFiltering = false
                                            });
                                            dataIndex++;
                                        }
                                        col.HeaderText(LocalizedStrings.GetString("Task"))
                                            .Columns(taskColumnList)
                                            .TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center)
                                            .Add();
                                    }
                                })
                                .QueryCellInfo("gridQueryCellInfo")
                                .RowSelecting("onSelectingCheck")
                                .Render()
                    )
                }
                else
                {
                    @Html.Label(LocalizedStrings.GetString("NoSkillAvailable"));
                }
            }
        </div>
    </div>
</div>

<style>
    .filterBar {
        display: inline-block;
        vertical-align: middle;
        float: none;
        padding-bottom: 10px;
    }

        .filterBar > .filterBtn {
            margin-top: 23px;
        }
</style>

<script type="text/javascript">
    docReady(function () {
        setHeader("@LocalizedStrings.GetString("Web_Menu_Training")" + "/" + "@LocalizedStrings.GetString("Competency")");
        setIsRefreshing(false);
        refreshLicenseExpiredStatus(@(ViewBag.LicenseExpired != null ? ViewBag.LicenseExpired.ToString().ToLower() : false));
        applyReadOnlyIfExpired();
    });

    function gridCreate(args) {
        var maxWidth = 0;
        $('.orientationcss > div').each(function (i, obj) {

            var html_org = $(this).html();
            var html_calc = '<span>' + html_org + '</span>';
            $(this).html(html_calc);
            var textWidth = $(this).find('span:first').width();
            $(this).html(html_org);

            if (textWidth > maxWidth)
                maxWidth = textWidth;
        });
        $(".e-headercell").css("height", maxWidth); //Assign the obtained textWidth as the height of the headerCell
        $(".e-stackedHeaderCell").css("height", 50);
    }
    function onDataBound(args) {
        if (!this.getCurrentViewRecords().length) {
            this.getContentTable().style.borderRight = '0px';  //hide the content frozen line
        }
        else {
            this.getContentTable().style.borderRight = '';
        }
    }
    function gridQueryCellInfo(args) {
        if (args.column.field.includes("HasCompetencyData")) {
            var dataIndex = parseInt(args.column.field.split('.')[1]);

            if (args.data["HasCompetency"][dataIndex] == true)
                args.cell.classList.add('readCell');
            else if (args.data["HasCompetencyPreviousVersion"][dataIndex] == true)
                args.cell.classList.add('readCellPreviousVersion');
            else if (args.data["HasCompetencyPreviousMajorVersion"][dataIndex] == true)
                args.cell.classList.add('readCellPreviousMajorVersion');
        }
    }
    function excelQueryCellInfo(args) {
        if (args.column.field.includes("HasCompetencyData")) {
            var dataIndex = parseInt(args.column.field.split('.')[1]);

            if (args.data["HasCompetency"][dataIndex] == true)
                args.style = { backColor: '#90EE90' };
            else if (args.data["HasCompetencyPreviousVersion"][dataIndex] == true)
                args.style = { backColor: '#90EE90' };
            else if (args.data["HasCompetencyPreviousMajorVersion"][dataIndex] == true)
                args.style = { backColor: '#FFFF66' };
        }
    }

    function gridHeaderCellInfo(args) {
        if (args.cell.column.allowSorting === false) {
            args.node.style.cursor = "default";
        }
    }

    function toolbarClick(args) {
        if (args.item.id === 'Competency_excelexport') {
            var gridObj = document.getElementById("Competency").ej2_instances[0];
            var excelExportProperties = {
                fileName: "Competency.xlsx"
            };
            gridObj.excelExport(excelExportProperties);
        }
    }

    function onFilter(event) {
        event = event || window.event || event.srcElement;
        event.preventDefault();
        var team = document.getElementById("team").ej2_instances[0].value;
        var position = document.getElementById("position").ej2_instances[0].value;
        var link = "/Publication/Competency?partial=True&team=-1&position=-2";
        link = link.replace("-1", team);
        link = link.replace("-2", position);
        LoadPartial(link, '#pageContainer');
    }
</script>

@Html.EJS().ScriptManager()

