@using KProcess.KL2.Languages;

@{
    var LocalizedStrings = (ILocalizationManager)ViewBag.LocalizedStrings;
}

<style>
    .disabledTab {
        pointer-events: none;
        cursor: not-allowed;
        opacity: .65;
        filter: alpha(opacity=65);
    }

    .disabledNode {
        pointer-events: none;
        cursor: not-allowed;
        filter: alpha(opacity=65);
    }

    /* Active process still have same color and background when user hover it */
    .e-active.e-node-hover {
        background: #3277b2 !important;
        background: -moz-linear-gradient(top,#3277b2,#296293) !important;
        background: -webkit-gradient(linear,left top,left bottom,color-stop(0%,#3277b2),color-stop(100%,#296293)) !important;
        background: -webkit-linear-gradient(top,#3277b2,#296293) !important;
        background: -o-linear-gradient(top,#3277b2,#296293) !important;
        background: -ms-linear-gradient(top,#3277b2,#296293) !important;
        background: linear-gradient(to bottom,#3277b2,#296293) !important;
        color: white !important;
    }

    .label {
        font-weight: 500;
        font-size: 100%;
    }

    .waiting {
        background-color: #f39c12 !important;
        opacity: 1;
    }

    .cancelled {
        background-color: #dd4b39 !important;
        opacity: 1;
    }

    .inprogress {
        background-color: #00c0ef !important;
        opacity: 1 !important;
    }

    .completed {
        background-color: #00a65a !important;
        opacity: 1;
    }

    .inerror {
        background-color: #dd4b39 !important;
        opacity: 1;
    }

    .e-form-container {
        width: 100%;
    }

    .innerContainer {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .innerHeader {
        flex: 0 0 auto;
        text-align: center;
    }

    .innerContent {
        flex: 1;
        flex-basis: 100%;
        min-height: 0px;
        margin-top: 10px;
        display: flex;
        flex-direction: column;
    }

    .docWizardFooter {
        display: flex;
        flex-direction: row;
        align-items: flex-end;
        padding-bottom: 10px;
        padding-top: 10px;
    }

    .blockDisplay {
        display: block;
    }

    .leftAlign {
        align-self: flex-start;
    }

    .e-prev-icon::before {
        content: '\ec06';
    }

    .e-next-icon::before {
        content: '\ec07';
    }
</style>

<div class="innerContainer">
    <div>
        @(Html.EJS().Tab("DocumentationWizardTab")
            .Items(builder =>
            {
                builder.Header(header => header.Text($"<div class=\"blockDisplay\">{LocalizedStrings.GetString("View_Documentation_Process")}<br /><small>{LocalizedStrings.GetString("View_Documentation_ProcessChoice")}</small></div>"))
                    .CssClass("DocumentationProcess")
                    .Disabled(false)
                    .Add();
                builder.Header(header => header.Text($"<div class=\"blockDisplay\">{LocalizedStrings.GetString("View_Documentation_Formatting")}<br /><small>{LocalizedStrings.GetString("View_Documentation_ManagingReferentials")}</small></div>"))
                    .CssClass("DocumentationReferentials")
                    .Disabled(true)
                    .Add();
                builder.Header(header => header.Text($"<div class=\"blockDisplay\">{LocalizedStrings.GetString("View_Documentation_Formatting")}<br /><small>{LocalizedStrings.GetString("View_Documentation_FormattingList")}</small></div>"))
                    .CssClass("DocumentationFormat")
                    .Disabled(true)
                    .Add();
                builder.Header(header => header.Text($"<div class=\"blockDisplay\">{LocalizedStrings.GetString("View_Documentation_Formatting")}<br /><small>{LocalizedStrings.GetString("View_Documentation_FormattingActions")}</small></div>"))
                    .CssClass("DocumentationFormatActions")
                    .Disabled(true)
                    .Add();
                builder.Header(header => header.Text($"<div class=\"blockDisplay\">{LocalizedStrings.GetString("Video")}<br /><small>{LocalizedStrings.GetString("View_Documentation_VideoSettings")}</small></div>"))
                    .CssClass("DocumentationVideos")
                    .Disabled(true)
                    .Add();
                builder.Header(header => header.Text($"<div class=\"blockDisplay\">{LocalizedStrings.GetString("View_Documentation_Versioning")}<br /><small>{LocalizedStrings.GetString("View_Documentation_VersioningSettings")}</small></div>"))
                    .CssClass("DocumentationSummary")
                    .Disabled(true)
                    .Add();
            })
            .Selected("docTabSelected")
            .Render()
        )
    </div>
    <div id="docTabContainer" class="innerContent">
    </div>
    <div class="docWizardFooter">
        @(Html.EJS().Button("docWizardPreviousBtn")
            .Content(LocalizedStrings.GetString("Common_Previous"))
            .IconCss("e-icons e-prev-icon")
            .CssClass("leftAlign e-primary")
            .HtmlAttributes(new Dictionary<string, object> { ["style"] = "display: none;" })
            .Disabled(true)
            .Render()
        )
        <div style="flex: 1;"></div>
        @(Html.EJS().Button("docWizardCancelBtn")
            .Content(LocalizedStrings.GetString("Common_Cancel"))
            .CssClass("e-warning")
            .HtmlAttributes(new Dictionary<string, object> { ["style"] = "display: none;" })
            .Disabled(true)
            .Render()
        )
        @(Html.EJS().Button("docWizardSaveAsDraftBtn")
            .Content(LocalizedStrings.GetString("View_Documentation_Common_SaveAsDraft"))
            .CssClass("e-success")
            .HtmlAttributes(new Dictionary<string, object> { ["style"] = "display: none;" })
            .Disabled(true)
            .Render()
        )
        @(Html.EJS().Button("docWizardNextBtn")
            .Content(LocalizedStrings.GetString("Common_Next"))
            .IconCss("e-icons e-next-icon")
            .IconPosition(Syncfusion.EJ2.Buttons.IconPosition.Right)
            .CssClass("e-primary")
            .HtmlAttributes(new Dictionary<string, object> { ["style"] = "display: none;" })
            .Disabled(true)
            .Render()
        )
        @(Html.EJS().Button("docWizardPublishBtn")
            .Content(LocalizedStrings.GetString("Common_Publish"))
            .CssClass("e-success")
            .HtmlAttributes(new Dictionary<string, object> { ["style"] = "display: none;" })
            .Disabled(true)
            .Render()
        )
    </div>
</div>

<script type="text/javascript">
    var documentationStates = {};
    var wizardTabControl = null;
    var leaveFunction = function () { };
    var cancelFunction = function () { };
    var saveAsDraftFunction = function () { };

    docReady(function () {
        wizardTabControl = document.getElementById('DocumentationWizardTab').ej2_instances[0];

        if (sessionStorage.getItem("isRefreshing") == "true") {
            var location = JSON.parse(sessionStorage.getItem('location'));
            var secondLocationItem = location[1];
            var indexToSelect = 0;
            var splittedAction = secondLocationItem.action.split('?')[0].split('/');
            var classToSelect = splittedAction[splittedAction.length - 1];
            for (var i = 0; i < wizardTabControl.items.length; i++) {
                if (wizardTabControl.items[i].cssClass == classToSelect) {
                    indexToSelect = i;
                    break;
                }
            }
            for (var i = 0; i < wizardTabControl.items.length && i <= indexToSelect; i++) {
                wizardTabControl.items[i].disabled = false;
            }
            wizardTabControl.refresh();
            if (indexToSelect == 0) {
                docTabSelected();
            } else {
                wizardTabControl.select(indexToSelect);
            }
        } else {
            clearDocumentationStates();
            LoadPartial('/Documentation/DocumentationProcess', '#docTabContainer', null, null, 1);
            setIsRefreshing(false);
        }
    });

    document.getElementById('docWizardPreviousBtn').onclick = function () {
        this.disabled = true;
        var selectedIndex = wizardTabControl.selectedItem;
        if (selectedIndex - 1 >= 0) {
            wizardTabControl.select(selectedIndex - 1);
        }
    };

    document.getElementById('docWizardNextBtn').onclick = function () {
        this.disabled = true;
        var selectedIndex = wizardTabControl.selectedItem;
        if (selectedIndex + 1 < wizardTabControl.items.length) {
            wizardTabControl.select(selectedIndex + 1);
        }
    };

    document.getElementById('docWizardCancelBtn').onclick = function () {
        cancelFunction();
    };

    document.getElementById('docWizardSaveAsDraftBtn').onclick = function () {
        saveAsDraftFunction();
    };

    document.getElementById('docWizardPublishBtn').onclick = function () {
        var releaseNoteMessage = "", isMajorMessage = "", contentMessage = "", emptyTaskExistMessage = "";
        var warningMessage = "<p/><p><span>" + "@Html.Raw(LocalizedStrings.GetString("PublishWarning"))" + "</span><p>";
        var noPublishMessage = "<p/><p><span>" + "@Html.Raw(LocalizedStrings.GetString("Web_View_Documentation_CannotPublish"))" + "</span><p>";
        var isMajorSelected = false;

        // Cancel if there's empty taks in one of Pubish mode enabled
        var emptyTask = new Array();
        if (documentationStates.publishForTraining && documentationStates.TrainingActions.length == 0) {
            emptyTask.push("@Html.Raw(LocalizedStrings.GetString("View_Documentation_TrainingLabel"))");
        }
        if (documentationStates.publishForEvaluation && documentationStates.EvaluationActions.length == 0) {
            emptyTask.push("@Html.Raw(LocalizedStrings.GetString("View_Documentation_EvaluationLabel"))");
        }
        if (documentationStates.publishForInspection && documentationStates.InspectionActions.length == 0) {
            emptyTask.push("@Html.Raw(LocalizedStrings.GetString("View_Documentation_InspectionLabel"))");
        }
        if (emptyTask.length > 0) {
            emptyTaskExistMessage = '<span>' + "@Html.Raw(LocalizedStrings.GetString("Web_View_Documentation_WarningNoTask"))" + emptyTask.join(', ') + '</span>';
            contentMessage = emptyTaskExistMessage + noPublishMessage;
            var cancelDialogObj = new ej.popups.Dialog({
                width: '400px',
                header: "<span class='d-flex justify-content-start'><i class='fas fa-exclamation-triangle fa-xs' style='width:auto;font-weight:900;padding-top:5px'></i> <span style='padding-left:5px;'>@Html.Raw(LocalizedStrings.GetString("Common_Attention"))</span></span>",
                content: contentMessage,
                target: document.getElementById('wrapper'),
                animationSettings: { effect: 'Fade' },
                isModal: true,
                visible: false,
                showCloseIcon: true,
                closeOnEscape: false,
                buttons: [
                    {
                        click: function () {
                            cancelDialogObj.hide();
                        },
                        buttonModel: { content: "@Html.Raw(LocalizedStrings.GetString("Common_Close"))" }
                    }
                ]
            });
            $('#modalDialogContainer').html("");
            cancelDialogObj.appendTo('#modalDialogContainer');
            cancelDialogObj.show();
            return;
        }
        
        var emptyRN = new Array();
        var isMajorList = new Array();
        if (documentationStates.publishForTraining) {
            var trainingRN = document.getElementById("TrainingReleaseNote").ej2_instances[0].value;
            if (trainingRN == "" || trainingRN == null) {
                emptyRN.push("@Html.Raw(LocalizedStrings.GetString("View_Documentation_TrainingLabel"))");
            }
            var trainingIsMajor = document.getElementById("TrainingVersioning").ej2_instances[0].value;
            if (trainingIsMajor == true) {
                isMajorList.push("@Html.Raw(LocalizedStrings.GetString("View_Documentation_TrainingLabel"))");
            }
        }
        if (documentationStates.publishForEvaluation && (evaluationRN == "" || evaluationRN == null)) {
            var evaluationRN = document.getElementById("EvaluationReleaseNote").ej2_instances[0].value;
            if (evaluationRN == "" || evaluationRN == null) {
                emptyRN.push("@Html.Raw(LocalizedStrings.GetString("View_Documentation_EvaluationLabel"))");
            }
            var evaluationIsMajor = document.getElementById("EvaluationVersioning").ej2_instances[0].value;
            if (evaluationIsMajor == true) {
                isMajorList.push("@Html.Raw(LocalizedStrings.GetString("View_Documentation_EvaluationLabel"))");
            }
        }
        if (documentationStates.publishForInspection && (inspectionRN == "" || inspectionRN == null)) {
            var inspectionRN = document.getElementById("InspectionReleaseNote").ej2_instances[0].value;
            if (inspectionRN == "" || inspectionRN == null) {
                emptyRN.push("@Html.Raw(LocalizedStrings.GetString("View_Documentation_InspectionLabel"))");
            }
            var inspectionIsMajor = document.getElementById("InspectionVersioning").ej2_instances[0].value;
            if (inspectionIsMajor == true) {
                isMajorList.push("@Html.Raw(LocalizedStrings.GetString("View_Documentation_InspectionLabel"))");
            }
        }
        //Release note empty warning
        if (emptyRN.length > 0) {
            releaseNoteMessage = '<span>' + String.format("@Html.Raw(LocalizedStrings.GetString("PublishWarningEmptyReleaseNote"))", emptyRN.join(', ')) + '</span>';
        }
        //Publish for major warning
        if (isMajorList.includes("@Html.Raw(LocalizedStrings.GetString("View_Documentation_EvaluationLabel"))")) {
            isMajorMessage = '<span>' + String.format('@Html.Raw(LocalizedStrings.GetString("PublishWarningIsMajor"))', isMajorList.join(', ')) + '</span>';
            isMajorSelected = true;
        }

        if (releaseNoteMessage != "" && isMajorMessage != "") {
            contentMessage = "<ul style='list-style-type:circle; padding-inline-start: 20px;'>" +
                "<li style='margin-bottom:20px;'>" + releaseNoteMessage + "</li>" +
                "<li>" + isMajorMessage + "</li>" +
                "</ul>" + warningMessage;
        }
        else
            contentMessage = releaseNoteMessage + isMajorMessage + warningMessage;

        //Display dialog
        if (emptyRN.length > 0 || isMajorSelected == true) {
            var confirmDialogObj = new ej.popups.Dialog({
                width: '400px',
                header: "<span class='d-flex justify-content-start'><i class='fas fa-exclamation-triangle fa-xs' style='width:auto;font-weight:900;padding-top:5px'></i> <span style='padding-left:5px;'>@Html.Raw(LocalizedStrings.GetString("Common_Attention"))</span></span>",
                content: contentMessage,
                target: document.getElementById('wrapper'),
                animationSettings: { effect: 'Fade' },
                isModal: true,
                visible: false,
                showCloseIcon: true,
                closeOnEscape: false,
                buttons: [
                    {
                        click: function () {
                            confirmDialogObj.hide();
                            publish();
                        },
                        buttonModel: { content: "@Html.Raw(LocalizedStrings.GetString("Common_Yes"))", isPrimary: true }
                    },
                    {
                        click: function () {
                            confirmDialogObj.hide();
                        },
                        buttonModel: { content: "@Html.Raw(LocalizedStrings.GetString("Common_No"))" }
                    }
                ]
            });
            $('#modalDialogContainer').html("");
            confirmDialogObj.appendTo('#modalDialogContainer');
            confirmDialogObj.show();
        } else {
            publish();
        }
    };

    function saveDocumentationStates() {
        sessionStorage.setItem('documentationStates', JSON.stringify(documentationStates));
    }

    function getDocumentationStates() {
        documentationStates = JSON.parse(sessionStorage.getItem('documentationStates'));
    }

    function clearDocumentationStates() {
        documentationStates = {};
        saveDocumentationStates();
    }

    function docTabSelected(args) {
        if (sessionStorage.getItem("isRefreshing") == "true") {
            // Force loading and don't save changes
        } else if (args.previousIndex == args.selectedIndex) {
            return;
        } else {
            leaveFunction(); // Save state of current tab
        }
        getDocumentationStates();
        var action = wizardTabControl.items[wizardTabControl.selectedItem].cssClass;
        if (action === "DocumentationProcess") {
            LoadPartial('/Documentation/' + action, '#docTabContainer', null, null, 1);
        } else if (action === "DocumentationReferentials") {
            LoadPartial('/Documentation/' + action, '#docTabContainer',
                {
                    processId: documentationStates.processId,
                    projectId: documentationStates.projectId,
                    scenarioId: documentationStates.scenarioId
                }, "POST", 1);
        } else if (action === "DocumentationFormat") {
            LoadPartial('/Documentation/' + action, '#docTabContainer',
                {
                    processId: documentationStates.processId,
                    projectId: documentationStates.projectId,
                    scenarioId: documentationStates.scenarioId,
                    publishForTraining: documentationStates.publishForTraining,
                    publishForEvaluation: documentationStates.publishForEvaluation,
                    publishForInspection: documentationStates.publishForInspection,
                    documentationDraftId: documentationStates.documentationDraftId
                }, "POST", 1);
        } else if (action === "DocumentationFormatActions") {
            LoadPartial('/Documentation/' + action, '#docTabContainer',
                {
                    processId: documentationStates.processId,
                    projectId: documentationStates.projectId,
                    scenarioId: documentationStates.scenarioId,
                    publishForTraining: documentationStates.publishForTraining,
                    publishForEvaluation: documentationStates.publishForEvaluation,
                    publishForInspection: documentationStates.publishForInspection,
                    documentationDraftId: documentationStates.documentationDraftId
                }, "POST", 1);
        } else if (action === "DocumentationVideos") {
            LoadPartial('/Documentation/' + action, '#docTabContainer',
                {
                    processId: documentationStates.processId,
                    projectId: documentationStates.projectId,
                    documentationDraftId: documentationStates.documentationDraftId
                }, "POST", 1);
        } else if (action === "DocumentationSummary") {
            LoadPartial('/Documentation/' + action, '#docTabContainer',
                {
                    processId: documentationStates.processId,
                    projectId: documentationStates.projectId,
                    scenarioId: documentationStates.scenarioId,
                    publishForTraining: documentationStates.publishForTraining,
                    publishForEvaluation: documentationStates.publishForEvaluation,
                    publishForInspection: documentationStates.publishForInspection,
                    documentationDraftId: documentationStates.documentationDraftId
                }, "POST", 1);
        }
        setState('docWizardPreviousBtn', false);
        setState('docWizardNextBtn', false);
        setIsRefreshing(false);
    }

    function setVisibility(eltId, visible) {
        if (visible === true) {
            document.getElementById(eltId).style.display = "block";
        } else if (visible === false) {
            document.getElementById(eltId).style.display = "none";
        }
    }

    function setState(eltId, state) {
        if (state === true) {
            document.getElementById(eltId).ej2_instances[0].disabled = false;
        } else if (state === false) {
            document.getElementById(eltId).ej2_instances[0].disabled = true;
        }
    }

    function setNextTabState(state) {
        var selectedIndex = wizardTabControl.selectedItem;
        if (selectedIndex + 1 < wizardTabControl.items.length) {
            var nextTab = wizardTabControl.items[selectedIndex + 1];
            nextTab.disabled = !state;
            wizardTabControl.refresh();
        }
    }

    function updateWizardButtonsVisibility(visibilities) {
        setVisibility('docWizardPreviousBtn', visibilities.previous);
        setVisibility('docWizardCancelBtn', visibilities.cancel);
        setVisibility('docWizardSaveAsDraftBtn', visibilities.saveasdraft);
        setVisibility('docWizardNextBtn', visibilities.next);
        setVisibility('docWizardPublishBtn', visibilities.publish);
    }

    function updateWizardButtonsStates(states) {
        setState('docWizardPreviousBtn', states.previous);
        setState('docWizardCancelBtn', states.cancel);
        setState('docWizardSaveAsDraftBtn', states.saveasdraft);
        if (states.next !== undefined) {
            setState('docWizardNextBtn', states.next);
            setNextTabState(states.next);
        }
        setState('docWizardPublishBtn', states.publish);
    }

    function publish() {
        var targetElement = $('#pageContainer')[0];
        var spinner = ej.popups.createSpinner({ target: targetElement });
        ej.popups.showSpinner(targetElement);
        // Save states
        leaveFunction();

        // Publish
        $.ajax({
            url: '/Documentation/Publish',
            type: 'POST',
            data: {
                documentationDraftId: documentationStates.documentationDraftId
            },
            success: function (result) {
                document.getElementById('toast_container').ej2_instances[0].show({ title: "", content: "@LocalizedStrings.GetValue("View_Documentation_PublicationCreated")", cssClass: 'e-toast-success', icon: 'e-success toast-icons' });
                redirectToPublicationsStates();
            },
            error: function (result) {
                document.getElementById('toast_container').ej2_instances[0].show({ title: "@(LocalizedStrings.GetString("Common_Error"))", content: result, cssClass: 'e-toast-danger', icon: 'e-error toast-icons' });
            }
        });
    }

    function redirectToPublicationsStates() {
        var targetElement = $('#pageContainer')[0];
        ej.popups.hideSpinner(targetElement);
        LoadPartial('/Documentation/History?partial=true', '#pageContainer');
    }

    @*function feedGlobalUpload(args) {
        console.log(args);
        if (args.filesData[0] != null) {
            uploadData["upfile"] = args.filesData[0].rawFile;
            var filename = args.filesData[0].name;
            $("#fileInput").html(filename);
            $("#clearFileButton").css("display", "block");
            uploadViaTus();
        }
    }*@
</script>

@Html.EJS().ScriptManager()